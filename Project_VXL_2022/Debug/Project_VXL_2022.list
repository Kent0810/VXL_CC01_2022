
Project_VXL_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003248  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003374  08003374  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08003374  08003374  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003374  08003374  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800337c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000009c  08003418  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003418  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c526  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b2  00000000  00000000  0002c5eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002e6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002f170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ab1  00000000  00000000  0002fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cff5  00000000  00000000  000475b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084bbb  00000000  00000000  000545a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  000d91b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800333c 	.word	0x0800333c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	0800333c 	.word	0x0800333c

0800014c <KeyInputHandler1>:

static int KeyReg3 = NORMAL_STATE; //previous

static int TimerForKeyPress = 200;

void KeyInputHandler1(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	KeyReg1Counter++;
 8000150:	4b0a      	ldr	r3, [pc, #40]	; (800017c <KeyInputHandler1+0x30>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a09      	ldr	r2, [pc, #36]	; (800017c <KeyInputHandler1+0x30>)
 8000158:	6013      	str	r3, [r2, #0]
	if(KeyReg1Counter >= 4){
 800015a:	4b08      	ldr	r3, [pc, #32]	; (800017c <KeyInputHandler1+0x30>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b03      	cmp	r3, #3
 8000160:	dd02      	ble.n	8000168 <KeyInputHandler1+0x1c>
		KeyReg1Counter = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <KeyInputHandler1+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
	}
	status1 = MANUAL_MODE;
 8000168:	4b05      	ldr	r3, [pc, #20]	; (8000180 <KeyInputHandler1+0x34>)
 800016a:	2214      	movs	r2, #20
 800016c:	601a      	str	r2, [r3, #0]
	status2 = MANUAL_MODE;
 800016e:	4b05      	ldr	r3, [pc, #20]	; (8000184 <KeyInputHandler1+0x38>)
 8000170:	2214      	movs	r2, #20
 8000172:	601a      	str	r2, [r3, #0]
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr
 800017c:	200000b8 	.word	0x200000b8
 8000180:	200000c0 	.word	0x200000c0
 8000184:	200000c4 	.word	0x200000c4

08000188 <LongKeyInputHandler1>:
void LongKeyInputHandler1(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	KeyInputHandler1();
 800018c:	f7ff ffde 	bl	800014c <KeyInputHandler1>
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}

08000194 <getKeyInput1>:

void getKeyInput1(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000198:	4b21      	ldr	r3, [pc, #132]	; (8000220 <getKeyInput1+0x8c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a21      	ldr	r2, [pc, #132]	; (8000224 <getKeyInput1+0x90>)
 800019e:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80001a0:	4b21      	ldr	r3, [pc, #132]	; (8000228 <getKeyInput1+0x94>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a1e      	ldr	r2, [pc, #120]	; (8000220 <getKeyInput1+0x8c>)
 80001a6:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001a8:	2102      	movs	r1, #2
 80001aa:	4820      	ldr	r0, [pc, #128]	; (800022c <getKeyInput1+0x98>)
 80001ac:	f001 fd24 	bl	8001bf8 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	461a      	mov	r2, r3
 80001b4:	4b1c      	ldr	r3, [pc, #112]	; (8000228 <getKeyInput1+0x94>)
 80001b6:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 80001b8:	4b1a      	ldr	r3, [pc, #104]	; (8000224 <getKeyInput1+0x90>)
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	4b18      	ldr	r3, [pc, #96]	; (8000220 <getKeyInput1+0x8c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d12b      	bne.n	800021c <getKeyInput1+0x88>
 80001c4:	4b16      	ldr	r3, [pc, #88]	; (8000220 <getKeyInput1+0x8c>)
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	4b17      	ldr	r3, [pc, #92]	; (8000228 <getKeyInput1+0x94>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d125      	bne.n	800021c <getKeyInput1+0x88>
		if(KeyReg3 != KeyReg2){
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <getKeyInput1+0x9c>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	4b14      	ldr	r3, [pc, #80]	; (8000228 <getKeyInput1+0x94>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d00d      	beq.n	80001f8 <getKeyInput1+0x64>
			KeyReg3 = KeyReg2;
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <getKeyInput1+0x94>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a13      	ldr	r2, [pc, #76]	; (8000230 <getKeyInput1+0x9c>)
 80001e2:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 80001e4:	4b10      	ldr	r3, [pc, #64]	; (8000228 <getKeyInput1+0x94>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d117      	bne.n	800021c <getKeyInput1+0x88>
				KeyInputHandler1();
 80001ec:	f7ff ffae 	bl	800014c <KeyInputHandler1>
				TimerForKeyPress = 200;
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <getKeyInput1+0xa0>)
 80001f2:	22c8      	movs	r2, #200	; 0xc8
 80001f4:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 80001f6:	e011      	b.n	800021c <getKeyInput1+0x88>
			TimerForKeyPress--;
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <getKeyInput1+0xa0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3b01      	subs	r3, #1
 80001fe:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <getKeyInput1+0xa0>)
 8000200:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <getKeyInput1+0xa0>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d108      	bne.n	800021c <getKeyInput1+0x88>
				if(KeyReg2 == PRESSED_STATE){
 800020a:	4b07      	ldr	r3, [pc, #28]	; (8000228 <getKeyInput1+0x94>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d101      	bne.n	8000216 <getKeyInput1+0x82>
					LongKeyInputHandler1();
 8000212:	f7ff ffb9 	bl	8000188 <LongKeyInputHandler1>
				TimerForKeyPress = 200;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <getKeyInput1+0xa0>)
 8000218:	22c8      	movs	r2, #200	; 0xc8
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000004 	.word	0x20000004
 8000224:	20000000 	.word	0x20000000
 8000228:	20000008 	.word	0x20000008
 800022c:	40010800 	.word	0x40010800
 8000230:	2000000c 	.word	0x2000000c
 8000234:	20000010 	.word	0x20000010

08000238 <KeyInputHandler2>:
//END SECOND TRAFFIC LIGHT

int KeyReg2Counter = 0;


void KeyInputHandler2(){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	if(KeyReg1Counter == 1){
 800023c:	4b4b      	ldr	r3, [pc, #300]	; (800036c <KeyInputHandler2+0x134>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d120      	bne.n	8000286 <KeyInputHandler2+0x4e>
		//INCREASE FIRST TRAFFIC LIGHT RED & SECOND TRAFFIC LIGHT GREEN
		tempRed0 = (tempRed0 + 1000) % 100000 ;
 8000244:	4b4a      	ldr	r3, [pc, #296]	; (8000370 <KeyInputHandler2+0x138>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800024c:	4b49      	ldr	r3, [pc, #292]	; (8000374 <KeyInputHandler2+0x13c>)
 800024e:	fb83 1302 	smull	r1, r3, r3, r2
 8000252:	1359      	asrs	r1, r3, #13
 8000254:	17d3      	asrs	r3, r2, #31
 8000256:	1acb      	subs	r3, r1, r3
 8000258:	4947      	ldr	r1, [pc, #284]	; (8000378 <KeyInputHandler2+0x140>)
 800025a:	fb01 f303 	mul.w	r3, r1, r3
 800025e:	1ad3      	subs	r3, r2, r3
 8000260:	4a43      	ldr	r2, [pc, #268]	; (8000370 <KeyInputHandler2+0x138>)
 8000262:	6013      	str	r3, [r2, #0]
		//tempRed1 = (tempRed1 + 1000) % 100000 ;
		tempGreen1 = (tempGreen1 + 1000) % 100000;
 8000264:	4b45      	ldr	r3, [pc, #276]	; (800037c <KeyInputHandler2+0x144>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800026c:	4b41      	ldr	r3, [pc, #260]	; (8000374 <KeyInputHandler2+0x13c>)
 800026e:	fb83 1302 	smull	r1, r3, r3, r2
 8000272:	1359      	asrs	r1, r3, #13
 8000274:	17d3      	asrs	r3, r2, #31
 8000276:	1acb      	subs	r3, r1, r3
 8000278:	493f      	ldr	r1, [pc, #252]	; (8000378 <KeyInputHandler2+0x140>)
 800027a:	fb01 f303 	mul.w	r3, r1, r3
 800027e:	1ad3      	subs	r3, r2, r3
 8000280:	4a3e      	ldr	r2, [pc, #248]	; (800037c <KeyInputHandler2+0x144>)
 8000282:	6013      	str	r3, [r2, #0]
 8000284:	e068      	b.n	8000358 <KeyInputHandler2+0x120>
	}
	else if(KeyReg1Counter == 2){
 8000286:	4b39      	ldr	r3, [pc, #228]	; (800036c <KeyInputHandler2+0x134>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b02      	cmp	r3, #2
 800028c:	d140      	bne.n	8000310 <KeyInputHandler2+0xd8>
		//INCREASE BOTH TRAFFIC LIGHT YELLOW
		tempYellow0 = (tempYellow0 + 1000) % 100000 ;
 800028e:	4b3c      	ldr	r3, [pc, #240]	; (8000380 <KeyInputHandler2+0x148>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000296:	4b37      	ldr	r3, [pc, #220]	; (8000374 <KeyInputHandler2+0x13c>)
 8000298:	fb83 1302 	smull	r1, r3, r3, r2
 800029c:	1359      	asrs	r1, r3, #13
 800029e:	17d3      	asrs	r3, r2, #31
 80002a0:	1acb      	subs	r3, r1, r3
 80002a2:	4935      	ldr	r1, [pc, #212]	; (8000378 <KeyInputHandler2+0x140>)
 80002a4:	fb01 f303 	mul.w	r3, r1, r3
 80002a8:	1ad3      	subs	r3, r2, r3
 80002aa:	4a35      	ldr	r2, [pc, #212]	; (8000380 <KeyInputHandler2+0x148>)
 80002ac:	6013      	str	r3, [r2, #0]
		tempYellow1 = (tempYellow1 + 1000) % 100000 ;
 80002ae:	4b35      	ldr	r3, [pc, #212]	; (8000384 <KeyInputHandler2+0x14c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80002b6:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <KeyInputHandler2+0x13c>)
 80002b8:	fb83 1302 	smull	r1, r3, r3, r2
 80002bc:	1359      	asrs	r1, r3, #13
 80002be:	17d3      	asrs	r3, r2, #31
 80002c0:	1acb      	subs	r3, r1, r3
 80002c2:	492d      	ldr	r1, [pc, #180]	; (8000378 <KeyInputHandler2+0x140>)
 80002c4:	fb01 f303 	mul.w	r3, r1, r3
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	4a2e      	ldr	r2, [pc, #184]	; (8000384 <KeyInputHandler2+0x14c>)
 80002cc:	6013      	str	r3, [r2, #0]
		tempRed0 = (tempRed0 + 1000) % 100000;
 80002ce:	4b28      	ldr	r3, [pc, #160]	; (8000370 <KeyInputHandler2+0x138>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80002d6:	4b27      	ldr	r3, [pc, #156]	; (8000374 <KeyInputHandler2+0x13c>)
 80002d8:	fb83 1302 	smull	r1, r3, r3, r2
 80002dc:	1359      	asrs	r1, r3, #13
 80002de:	17d3      	asrs	r3, r2, #31
 80002e0:	1acb      	subs	r3, r1, r3
 80002e2:	4925      	ldr	r1, [pc, #148]	; (8000378 <KeyInputHandler2+0x140>)
 80002e4:	fb01 f303 	mul.w	r3, r1, r3
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	4a21      	ldr	r2, [pc, #132]	; (8000370 <KeyInputHandler2+0x138>)
 80002ec:	6013      	str	r3, [r2, #0]
		tempRed1 = (tempRed1 + 1000) % 100000;
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <KeyInputHandler2+0x150>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80002f6:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <KeyInputHandler2+0x13c>)
 80002f8:	fb83 1302 	smull	r1, r3, r3, r2
 80002fc:	1359      	asrs	r1, r3, #13
 80002fe:	17d3      	asrs	r3, r2, #31
 8000300:	1acb      	subs	r3, r1, r3
 8000302:	491d      	ldr	r1, [pc, #116]	; (8000378 <KeyInputHandler2+0x140>)
 8000304:	fb01 f303 	mul.w	r3, r1, r3
 8000308:	1ad3      	subs	r3, r2, r3
 800030a:	4a1f      	ldr	r2, [pc, #124]	; (8000388 <KeyInputHandler2+0x150>)
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	e023      	b.n	8000358 <KeyInputHandler2+0x120>
	}
	else if(KeyReg1Counter == 3){
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <KeyInputHandler2+0x134>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b03      	cmp	r3, #3
 8000316:	d11f      	bne.n	8000358 <KeyInputHandler2+0x120>
		//INCREASE FIRST TRAFFIC LIGHT GREEN & SECOND TRAFFIC LIGHT RED
		tempGreen0 = (tempGreen0 + 1000) % 100000;
 8000318:	4b1c      	ldr	r3, [pc, #112]	; (800038c <KeyInputHandler2+0x154>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <KeyInputHandler2+0x13c>)
 8000322:	fb83 1302 	smull	r1, r3, r3, r2
 8000326:	1359      	asrs	r1, r3, #13
 8000328:	17d3      	asrs	r3, r2, #31
 800032a:	1acb      	subs	r3, r1, r3
 800032c:	4912      	ldr	r1, [pc, #72]	; (8000378 <KeyInputHandler2+0x140>)
 800032e:	fb01 f303 	mul.w	r3, r1, r3
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	4a15      	ldr	r2, [pc, #84]	; (800038c <KeyInputHandler2+0x154>)
 8000336:	6013      	str	r3, [r2, #0]
		//tempGreen1 = (tempGreen1 + 1000) % 100000;
		tempRed1 = (tempRed1 + 1000) % 100000 ;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <KeyInputHandler2+0x150>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <KeyInputHandler2+0x13c>)
 8000342:	fb83 1302 	smull	r1, r3, r3, r2
 8000346:	1359      	asrs	r1, r3, #13
 8000348:	17d3      	asrs	r3, r2, #31
 800034a:	1acb      	subs	r3, r1, r3
 800034c:	490a      	ldr	r1, [pc, #40]	; (8000378 <KeyInputHandler2+0x140>)
 800034e:	fb01 f303 	mul.w	r3, r1, r3
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	4a0c      	ldr	r2, [pc, #48]	; (8000388 <KeyInputHandler2+0x150>)
 8000356:	6013      	str	r3, [r2, #0]
	}
	status1 = TUNING_MODE;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <KeyInputHandler2+0x158>)
 800035a:	2215      	movs	r2, #21
 800035c:	601a      	str	r2, [r3, #0]
	status2 = TUNING_MODE;
 800035e:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <KeyInputHandler2+0x15c>)
 8000360:	2215      	movs	r2, #21
 8000362:	601a      	str	r2, [r3, #0]

}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	200000b8 	.word	0x200000b8
 8000370:	20000034 	.word	0x20000034
 8000374:	14f8b589 	.word	0x14f8b589
 8000378:	000186a0 	.word	0x000186a0
 800037c:	20000054 	.word	0x20000054
 8000380:	20000038 	.word	0x20000038
 8000384:	20000050 	.word	0x20000050
 8000388:	2000004c 	.word	0x2000004c
 800038c:	2000003c 	.word	0x2000003c
 8000390:	200000c0 	.word	0x200000c0
 8000394:	200000c4 	.word	0x200000c4

08000398 <LongKeyInputHandler2>:
void LongKeyInputHandler2(){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	KeyInputHandler2();
 800039c:	f7ff ff4c 	bl	8000238 <KeyInputHandler2>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <getKeyInput2>:

void getKeyInput2(){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80003a8:	4b21      	ldr	r3, [pc, #132]	; (8000430 <getKeyInput2+0x8c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a21      	ldr	r2, [pc, #132]	; (8000434 <getKeyInput2+0x90>)
 80003ae:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <getKeyInput2+0x94>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1e      	ldr	r2, [pc, #120]	; (8000430 <getKeyInput2+0x8c>)
 80003b6:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80003b8:	2110      	movs	r1, #16
 80003ba:	4820      	ldr	r0, [pc, #128]	; (800043c <getKeyInput2+0x98>)
 80003bc:	f001 fc1c 	bl	8001bf8 <HAL_GPIO_ReadPin>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <getKeyInput2+0x94>)
 80003c6:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <getKeyInput2+0x90>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <getKeyInput2+0x8c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d12b      	bne.n	800042c <getKeyInput2+0x88>
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <getKeyInput2+0x8c>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <getKeyInput2+0x94>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d125      	bne.n	800042c <getKeyInput2+0x88>
		if(KeyReg3 != KeyReg2){
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <getKeyInput2+0x9c>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <getKeyInput2+0x94>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d00d      	beq.n	8000408 <getKeyInput2+0x64>
			KeyReg3 = KeyReg2;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <getKeyInput2+0x94>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a13      	ldr	r2, [pc, #76]	; (8000440 <getKeyInput2+0x9c>)
 80003f2:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 80003f4:	4b10      	ldr	r3, [pc, #64]	; (8000438 <getKeyInput2+0x94>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d117      	bne.n	800042c <getKeyInput2+0x88>
				KeyInputHandler2();
 80003fc:	f7ff ff1c 	bl	8000238 <KeyInputHandler2>
				TimerForKeyPress = 200;
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <getKeyInput2+0xa0>)
 8000402:	22c8      	movs	r2, #200	; 0xc8
 8000404:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 8000406:	e011      	b.n	800042c <getKeyInput2+0x88>
			TimerForKeyPress--;
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <getKeyInput2+0xa0>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <getKeyInput2+0xa0>)
 8000410:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <getKeyInput2+0xa0>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d108      	bne.n	800042c <getKeyInput2+0x88>
				if(KeyReg2 == PRESSED_STATE){
 800041a:	4b07      	ldr	r3, [pc, #28]	; (8000438 <getKeyInput2+0x94>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d101      	bne.n	8000426 <getKeyInput2+0x82>
					LongKeyInputHandler2();
 8000422:	f7ff ffb9 	bl	8000398 <LongKeyInputHandler2>
				TimerForKeyPress = 200;
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <getKeyInput2+0xa0>)
 8000428:	22c8      	movs	r2, #200	; 0xc8
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000018 	.word	0x20000018
 8000434:	20000014 	.word	0x20000014
 8000438:	2000001c 	.word	0x2000001c
 800043c:	40010800 	.word	0x40010800
 8000440:	20000020 	.word	0x20000020
 8000444:	20000024 	.word	0x20000024

08000448 <KeyInputHandler3>:
static int KeyReg3 = NORMAL_STATE; //previous

static int TimerForKeyPress = 200;


void KeyInputHandler3(){
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

	setRed0 = tempRed0;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <KeyInputHandler3+0x50>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <KeyInputHandler3+0x54>)
 8000452:	6013      	str	r3, [r2, #0]
	setRed1 = tempRed1;
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <KeyInputHandler3+0x58>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <KeyInputHandler3+0x5c>)
 800045a:	6013      	str	r3, [r2, #0]

	setYellow0 = tempYellow0;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <KeyInputHandler3+0x60>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a12      	ldr	r2, [pc, #72]	; (80004ac <KeyInputHandler3+0x64>)
 8000462:	6013      	str	r3, [r2, #0]
	setYellow1 = tempYellow1;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <KeyInputHandler3+0x68>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <KeyInputHandler3+0x6c>)
 800046a:	6013      	str	r3, [r2, #0]

	setGreen0 = tempGreen0;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <KeyInputHandler3+0x70>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a12      	ldr	r2, [pc, #72]	; (80004bc <KeyInputHandler3+0x74>)
 8000472:	6013      	str	r3, [r2, #0]
	setGreen1 = tempGreen1;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <KeyInputHandler3+0x78>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <KeyInputHandler3+0x7c>)
 800047a:	6013      	str	r3, [r2, #0]

	KeyReg1Counter = 0;
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <KeyInputHandler3+0x80>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
	status1 = INIT;
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <KeyInputHandler3+0x84>)
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
	status2 = INIT;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <KeyInputHandler3+0x88>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000034 	.word	0x20000034
 800049c:	20000028 	.word	0x20000028
 80004a0:	2000004c 	.word	0x2000004c
 80004a4:	20000040 	.word	0x20000040
 80004a8:	20000038 	.word	0x20000038
 80004ac:	2000002c 	.word	0x2000002c
 80004b0:	20000050 	.word	0x20000050
 80004b4:	20000044 	.word	0x20000044
 80004b8:	2000003c 	.word	0x2000003c
 80004bc:	20000030 	.word	0x20000030
 80004c0:	20000054 	.word	0x20000054
 80004c4:	20000048 	.word	0x20000048
 80004c8:	200000b8 	.word	0x200000b8
 80004cc:	200000c0 	.word	0x200000c0
 80004d0:	200000c4 	.word	0x200000c4

080004d4 <LongKeyInputHandler3>:
void LongKeyInputHandler3(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	KeyInputHandler3();
 80004d8:	f7ff ffb6 	bl	8000448 <KeyInputHandler3>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <getKeyInput3>:

void getKeyInput3(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <getKeyInput3+0x8c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a21      	ldr	r2, [pc, #132]	; (8000570 <getKeyInput3+0x90>)
 80004ea:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <getKeyInput3+0x94>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a1e      	ldr	r2, [pc, #120]	; (800056c <getKeyInput3+0x8c>)
 80004f2:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80004f4:	2101      	movs	r1, #1
 80004f6:	4820      	ldr	r0, [pc, #128]	; (8000578 <getKeyInput3+0x98>)
 80004f8:	f001 fb7e 	bl	8001bf8 <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	461a      	mov	r2, r3
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <getKeyInput3+0x94>)
 8000502:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <getKeyInput3+0x90>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <getKeyInput3+0x8c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d12b      	bne.n	8000568 <getKeyInput3+0x88>
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <getKeyInput3+0x8c>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <getKeyInput3+0x94>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	429a      	cmp	r2, r3
 800051a:	d125      	bne.n	8000568 <getKeyInput3+0x88>
		if(KeyReg3 != KeyReg2){
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <getKeyInput3+0x9c>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <getKeyInput3+0x94>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	429a      	cmp	r2, r3
 8000526:	d00d      	beq.n	8000544 <getKeyInput3+0x64>
			KeyReg3 = KeyReg2;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <getKeyInput3+0x94>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a13      	ldr	r2, [pc, #76]	; (800057c <getKeyInput3+0x9c>)
 800052e:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <getKeyInput3+0x94>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d117      	bne.n	8000568 <getKeyInput3+0x88>
				KeyInputHandler3();
 8000538:	f7ff ff86 	bl	8000448 <KeyInputHandler3>
				TimerForKeyPress = 200;
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <getKeyInput3+0xa0>)
 800053e:	22c8      	movs	r2, #200	; 0xc8
 8000540:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 8000542:	e011      	b.n	8000568 <getKeyInput3+0x88>
			TimerForKeyPress--;
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <getKeyInput3+0xa0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <getKeyInput3+0xa0>)
 800054c:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <getKeyInput3+0xa0>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d108      	bne.n	8000568 <getKeyInput3+0x88>
				if(KeyReg2 == PRESSED_STATE){
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <getKeyInput3+0x94>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d101      	bne.n	8000562 <getKeyInput3+0x82>
					LongKeyInputHandler3();
 800055e:	f7ff ffb9 	bl	80004d4 <LongKeyInputHandler3>
				TimerForKeyPress = 200;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <getKeyInput3+0xa0>)
 8000564:	22c8      	movs	r2, #200	; 0xc8
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000005c 	.word	0x2000005c
 8000570:	20000058 	.word	0x20000058
 8000574:	20000060 	.word	0x20000060
 8000578:	40010c00 	.word	0x40010c00
 800057c:	20000064 	.word	0x20000064
 8000580:	20000068 	.word	0x20000068

08000584 <KeyInputHandler4>:
static int KeyReg3 = NORMAL_STATE; //previous

static int TimerForKeyPress = 200;


void KeyInputHandler4(){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

	if(pes_status == PES_OFF) pes_status = PES_ON;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <KeyInputHandler4+0x44>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b07      	cmp	r3, #7
 800058e:	d103      	bne.n	8000598 <KeyInputHandler4+0x14>
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <KeyInputHandler4+0x44>)
 8000592:	2208      	movs	r2, #8
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	e005      	b.n	80005a4 <KeyInputHandler4+0x20>
	else {
		pes_status = PES_OFF;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <KeyInputHandler4+0x44>)
 800059a:	2207      	movs	r2, #7
 800059c:	601a      	str	r2, [r3, #0]
		buzzer_status = BUZZER_OFF;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <KeyInputHandler4+0x48>)
 80005a0:	2219      	movs	r2, #25
 80005a2:	601a      	str	r2, [r3, #0]
	}
	setTimer4((setRed0 + setYellow0 + setGreen0)*2);
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <KeyInputHandler4+0x4c>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <KeyInputHandler4+0x50>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	441a      	add	r2, r3
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <KeyInputHandler4+0x54>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fdba 	bl	8001130 <setTimer4>
	buzzer_status = BUZZER_ON;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <KeyInputHandler4+0x48>)
 80005be:	2217      	movs	r2, #23
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	20000028 	.word	0x20000028
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	20000030 	.word	0x20000030

080005dc <LongKeyInputHandler4>:
void LongKeyInputHandler4(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	KeyInputHandler4();
 80005e0:	f7ff ffd0 	bl	8000584 <KeyInputHandler4>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <getKeyInput4>:

void getKeyInput4(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <getKeyInput4+0x8c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <getKeyInput4+0x90>)
 80005f2:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <getKeyInput4+0x94>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <getKeyInput4+0x8c>)
 80005fa:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80005fc:	2101      	movs	r1, #1
 80005fe:	4820      	ldr	r0, [pc, #128]	; (8000680 <getKeyInput4+0x98>)
 8000600:	f001 fafa 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <getKeyInput4+0x94>)
 800060a:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <getKeyInput4+0x90>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <getKeyInput4+0x8c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d12b      	bne.n	8000670 <getKeyInput4+0x88>
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <getKeyInput4+0x8c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <getKeyInput4+0x94>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d125      	bne.n	8000670 <getKeyInput4+0x88>
		if(KeyReg3 != KeyReg2){
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <getKeyInput4+0x9c>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <getKeyInput4+0x94>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d00d      	beq.n	800064c <getKeyInput4+0x64>
			KeyReg3 = KeyReg2;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <getKeyInput4+0x94>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <getKeyInput4+0x9c>)
 8000636:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <getKeyInput4+0x94>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d117      	bne.n	8000670 <getKeyInput4+0x88>
				KeyInputHandler4();
 8000640:	f7ff ffa0 	bl	8000584 <KeyInputHandler4>
				TimerForKeyPress = 200;
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <getKeyInput4+0xa0>)
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 800064a:	e011      	b.n	8000670 <getKeyInput4+0x88>
			TimerForKeyPress--;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <getKeyInput4+0xa0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <getKeyInput4+0xa0>)
 8000654:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <getKeyInput4+0xa0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d108      	bne.n	8000670 <getKeyInput4+0x88>
				if(KeyReg2 == PRESSED_STATE){
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <getKeyInput4+0x94>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d101      	bne.n	800066a <getKeyInput4+0x82>
					LongKeyInputHandler4();
 8000666:	f7ff ffb9 	bl	80005dc <LongKeyInputHandler4>
				TimerForKeyPress = 200;
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <getKeyInput4+0xa0>)
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000070 	.word	0x20000070
 8000678:	2000006c 	.word	0x2000006c
 800067c:	20000074 	.word	0x20000074
 8000680:	40010800 	.word	0x40010800
 8000684:	20000078 	.word	0x20000078
 8000688:	2000007c 	.word	0x2000007c

0800068c <buzzer_run>:
#include "fsm_run.h"
#include "tim.h"

int buzzerCounter = 0;

void buzzer_run(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch(buzzer_status){
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <buzzer_run+0x60>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b19      	cmp	r3, #25
 8000696:	d006      	beq.n	80006a6 <buzzer_run+0x1a>
 8000698:	2b19      	cmp	r3, #25
 800069a:	dc24      	bgt.n	80006e6 <buzzer_run+0x5a>
 800069c:	2b17      	cmp	r3, #23
 800069e:	d00f      	beq.n	80006c0 <buzzer_run+0x34>
 80006a0:	2b18      	cmp	r3, #24
 80006a2:	d005      	beq.n	80006b0 <buzzer_run+0x24>
		setPulse(1000);
		buzzerCounter+=1;
		buzzer_status =BUZZER_WAIT;
		break;
	}
}
 80006a4:	e01f      	b.n	80006e6 <buzzer_run+0x5a>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <buzzer_run+0x64>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80006ae:	e01a      	b.n	80006e6 <buzzer_run+0x5a>
		if(pulse_flag == 1){
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <buzzer_run+0x68>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d115      	bne.n	80006e4 <buzzer_run+0x58>
			buzzer_status = BUZZER_ON;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <buzzer_run+0x60>)
 80006ba:	2217      	movs	r2, #23
 80006bc:	601a      	str	r2, [r3, #0]
		break;
 80006be:	e011      	b.n	80006e4 <buzzer_run+0x58>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzerCounter);
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <buzzer_run+0x6c>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <buzzer_run+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
		setPulse(1000);
 80006ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ce:	f000 fd4b 	bl	8001168 <setPulse>
		buzzerCounter+=1;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <buzzer_run+0x6c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <buzzer_run+0x6c>)
 80006da:	6013      	str	r3, [r2, #0]
		buzzer_status =BUZZER_WAIT;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <buzzer_run+0x60>)
 80006de:	2218      	movs	r2, #24
 80006e0:	601a      	str	r2, [r3, #0]
		break;
 80006e2:	e000      	b.n	80006e6 <buzzer_run+0x5a>
		break;
 80006e4:	bf00      	nop
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	200000f0 	.word	0x200000f0
 80006f4:	200000d8 	.word	0x200000d8
 80006f8:	200000bc 	.word	0x200000bc

080006fc <pes_run>:


void pes_run(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	switch (pes_status){
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <pes_run+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b07      	cmp	r3, #7
 8000706:	d002      	beq.n	800070e <pes_run+0x12>
 8000708:	2b08      	cmp	r3, #8
 800070a:	d010      	beq.n	800072e <pes_run+0x32>
		if(timer4_flag == 1){
			pes_status = PES_OFF;
		}
		break;
	default:
		break;
 800070c:	e059      	b.n	80007c2 <pes_run+0xc6>
		buzzer_status = BUZZER_OFF;
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <pes_run+0xd0>)
 8000710:	2219      	movs	r2, #25
 8000712:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(PES_LED_0_GPIO_Port, PES_LED_0_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	482d      	ldr	r0, [pc, #180]	; (80007d0 <pes_run+0xd4>)
 800071c:	f001 fa83 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PES_LED_1_GPIO_Port, PES_LED_1_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	482b      	ldr	r0, [pc, #172]	; (80007d4 <pes_run+0xd8>)
 8000728:	f001 fa7d 	bl	8001c26 <HAL_GPIO_WritePin>
		break;
 800072c:	e049      	b.n	80007c2 <pes_run+0xc6>
		if(status1 == RED || status1 == MAN_RED){
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <pes_run+0xdc>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d003      	beq.n	800073e <pes_run+0x42>
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <pes_run+0xdc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b04      	cmp	r3, #4
 800073c:	d112      	bne.n	8000764 <pes_run+0x68>
			if(status1 == RED){
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <pes_run+0xdc>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d102      	bne.n	800074c <pes_run+0x50>
				buzzer_status = BUZZER_OFF;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <pes_run+0xd0>)
 8000748:	2219      	movs	r2, #25
 800074a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(PES_LED_0_GPIO_Port, PES_LED_0_Pin, SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000752:	481f      	ldr	r0, [pc, #124]	; (80007d0 <pes_run+0xd4>)
 8000754:	f001 fa67 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PES_LED_1_GPIO_Port, PES_LED_1_Pin, RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800075e:	481d      	ldr	r0, [pc, #116]	; (80007d4 <pes_run+0xd8>)
 8000760:	f001 fa61 	bl	8001c26 <HAL_GPIO_WritePin>
		if(status1 == GREEN || status1 == MAN_GREEN || status1 == YELLOW || status1 == MAN_YELLOW){
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <pes_run+0xdc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d00b      	beq.n	8000784 <pes_run+0x88>
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <pes_run+0xdc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b06      	cmp	r3, #6
 8000772:	d007      	beq.n	8000784 <pes_run+0x88>
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <pes_run+0xdc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d003      	beq.n	8000784 <pes_run+0x88>
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <pes_run+0xdc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b05      	cmp	r3, #5
 8000782:	d116      	bne.n	80007b2 <pes_run+0xb6>
			if(status1 == GREEN || status1 == YELLOW){
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <pes_run+0xdc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b03      	cmp	r3, #3
 800078a:	d003      	beq.n	8000794 <pes_run+0x98>
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <pes_run+0xdc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d102      	bne.n	800079a <pes_run+0x9e>
				buzzer_status = BUZZER_ON;
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <pes_run+0xd0>)
 8000796:	2217      	movs	r2, #23
 8000798:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(PES_LED_0_GPIO_Port, PES_LED_0_Pin, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <pes_run+0xd4>)
 80007a2:	f001 fa40 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PES_LED_1_GPIO_Port, PES_LED_1_Pin, SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <pes_run+0xd8>)
 80007ae:	f001 fa3a 	bl	8001c26 <HAL_GPIO_WritePin>
		if(timer4_flag == 1){
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <pes_run+0xe0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d102      	bne.n	80007c0 <pes_run+0xc4>
			pes_status = PES_OFF;
 80007ba:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <pes_run+0xcc>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
		break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000088 	.word	0x20000088
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40010800 	.word	0x40010800
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	200000c0 	.word	0x200000c0
 80007dc:	200000d4 	.word	0x200000d4

080007e0 <fsm_run0>:


int counter0 = 50;
//STATE MACHINE FOR THE TRAFFIC LIGHT
void fsm_run0(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	switch (status1){
 80007e4:	4bb3      	ldr	r3, [pc, #716]	; (8000ab4 <fsm_run0+0x2d4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b16      	cmp	r3, #22
 80007ea:	f200 81a5 	bhi.w	8000b38 <fsm_run0+0x358>
 80007ee:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <fsm_run0+0x14>)
 80007f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f4:	08000851 	.word	0x08000851
 80007f8:	08000a83 	.word	0x08000a83
 80007fc:	08000b09 	.word	0x08000b09
 8000800:	08000ad9 	.word	0x08000ad9
 8000804:	080008b9 	.word	0x080008b9
 8000808:	08000927 	.word	0x08000927
 800080c:	0800097f 	.word	0x0800097f
 8000810:	08000b39 	.word	0x08000b39
 8000814:	08000b39 	.word	0x08000b39
 8000818:	08000b39 	.word	0x08000b39
 800081c:	08000b39 	.word	0x08000b39
 8000820:	08000b39 	.word	0x08000b39
 8000824:	08000b39 	.word	0x08000b39
 8000828:	08000b39 	.word	0x08000b39
 800082c:	08000b39 	.word	0x08000b39
 8000830:	08000b39 	.word	0x08000b39
 8000834:	08000b39 	.word	0x08000b39
 8000838:	08000b39 	.word	0x08000b39
 800083c:	08000b39 	.word	0x08000b39
 8000840:	0800086f 	.word	0x0800086f
 8000844:	08000881 	.word	0x08000881
 8000848:	080009f9 	.word	0x080009f9
 800084c:	080009d7 	.word	0x080009d7
	case INIT:
		HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000856:	4898      	ldr	r0, [pc, #608]	; (8000ab8 <fsm_run0+0x2d8>)
 8000858:	f001 f9e5 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2108      	movs	r1, #8
 8000860:	4896      	ldr	r0, [pc, #600]	; (8000abc <fsm_run0+0x2dc>)
 8000862:	f001 f9e0 	bl	8001c26 <HAL_GPIO_WritePin>
		status1 = AUTOMATIC_MODE;
 8000866:	4b93      	ldr	r3, [pc, #588]	; (8000ab4 <fsm_run0+0x2d4>)
 8000868:	2213      	movs	r2, #19
 800086a:	601a      	str	r2, [r3, #0]
		break;
 800086c:	e16f      	b.n	8000b4e <fsm_run0+0x36e>
	case AUTOMATIC_MODE:
		setTimer1(setRed0);
 800086e:	4b94      	ldr	r3, [pc, #592]	; (8000ac0 <fsm_run0+0x2e0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fc08 	bl	8001088 <setTimer1>
		status1 = RED;
 8000878:	4b8e      	ldr	r3, [pc, #568]	; (8000ab4 <fsm_run0+0x2d4>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
		break;
 800087e:	e166      	b.n	8000b4e <fsm_run0+0x36e>
	case MANUAL_MODE:
		if(KeyReg1Counter == 1){
 8000880:	4b90      	ldr	r3, [pc, #576]	; (8000ac4 <fsm_run0+0x2e4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d103      	bne.n	8000890 <fsm_run0+0xb0>
			status1 = MAN_RED;
 8000888:	4b8a      	ldr	r3, [pc, #552]	; (8000ab4 <fsm_run0+0x2d4>)
 800088a:	2204      	movs	r2, #4
 800088c:	601a      	str	r2, [r3, #0]
			status1 = MAN_GREEN;
		}
		else {
			status1 = AUTOMATIC_MODE;
		}
		break;
 800088e:	e15e      	b.n	8000b4e <fsm_run0+0x36e>
		else if(KeyReg1Counter == 2){
 8000890:	4b8c      	ldr	r3, [pc, #560]	; (8000ac4 <fsm_run0+0x2e4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d103      	bne.n	80008a0 <fsm_run0+0xc0>
			status1 = MAN_YELLOW;
 8000898:	4b86      	ldr	r3, [pc, #536]	; (8000ab4 <fsm_run0+0x2d4>)
 800089a:	2205      	movs	r2, #5
 800089c:	601a      	str	r2, [r3, #0]
		break;
 800089e:	e156      	b.n	8000b4e <fsm_run0+0x36e>
		else if(KeyReg1Counter == 3){
 80008a0:	4b88      	ldr	r3, [pc, #544]	; (8000ac4 <fsm_run0+0x2e4>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d103      	bne.n	80008b0 <fsm_run0+0xd0>
			status1 = MAN_GREEN;
 80008a8:	4b82      	ldr	r3, [pc, #520]	; (8000ab4 <fsm_run0+0x2d4>)
 80008aa:	2206      	movs	r2, #6
 80008ac:	601a      	str	r2, [r3, #0]
		break;
 80008ae:	e14e      	b.n	8000b4e <fsm_run0+0x36e>
			status1 = AUTOMATIC_MODE;
 80008b0:	4b80      	ldr	r3, [pc, #512]	; (8000ab4 <fsm_run0+0x2d4>)
 80008b2:	2213      	movs	r2, #19
 80008b4:	601a      	str	r2, [r3, #0]
		break;
 80008b6:	e14a      	b.n	8000b4e <fsm_run0+0x36e>
	case MAN_RED:
		HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008be:	487e      	ldr	r0, [pc, #504]	; (8000ab8 <fsm_run0+0x2d8>)
 80008c0:	f001 f9b1 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	487c      	ldr	r0, [pc, #496]	; (8000abc <fsm_run0+0x2dc>)
 80008ca:	f001 f9ac 	bl	8001c26 <HAL_GPIO_WritePin>
		if(counter0 > 0){
 80008ce:	4b7e      	ldr	r3, [pc, #504]	; (8000ac8 <fsm_run0+0x2e8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dd0a      	ble.n	80008ec <fsm_run0+0x10c>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008dc:	4876      	ldr	r0, [pc, #472]	; (8000ab8 <fsm_run0+0x2d8>)
 80008de:	f001 f9a2 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	4875      	ldr	r0, [pc, #468]	; (8000abc <fsm_run0+0x2dc>)
 80008e8:	f001 f99d 	bl	8001c26 <HAL_GPIO_WritePin>
		}
		if(counter0 < 0){
 80008ec:	4b76      	ldr	r3, [pc, #472]	; (8000ac8 <fsm_run0+0x2e8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	da12      	bge.n	800091a <fsm_run0+0x13a>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fa:	486f      	ldr	r0, [pc, #444]	; (8000ab8 <fsm_run0+0x2d8>)
 80008fc:	f001 f993 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2108      	movs	r1, #8
 8000904:	486d      	ldr	r0, [pc, #436]	; (8000abc <fsm_run0+0x2dc>)
 8000906:	f001 f98e 	bl	8001c26 <HAL_GPIO_WritePin>
			if(counter0 == -50){
 800090a:	4b6f      	ldr	r3, [pc, #444]	; (8000ac8 <fsm_run0+0x2e8>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8000912:	d102      	bne.n	800091a <fsm_run0+0x13a>
				counter0 = 50;
 8000914:	4b6c      	ldr	r3, [pc, #432]	; (8000ac8 <fsm_run0+0x2e8>)
 8000916:	2232      	movs	r2, #50	; 0x32
 8000918:	601a      	str	r2, [r3, #0]
			}
		}
		counter0--;
 800091a:	4b6b      	ldr	r3, [pc, #428]	; (8000ac8 <fsm_run0+0x2e8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3b01      	subs	r3, #1
 8000920:	4a69      	ldr	r2, [pc, #420]	; (8000ac8 <fsm_run0+0x2e8>)
 8000922:	6013      	str	r3, [r2, #0]
		break;
 8000924:	e113      	b.n	8000b4e <fsm_run0+0x36e>
	case MAN_YELLOW:
		if(counter0 > 0){
 8000926:	4b68      	ldr	r3, [pc, #416]	; (8000ac8 <fsm_run0+0x2e8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dd0a      	ble.n	8000944 <fsm_run0+0x164>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000934:	4860      	ldr	r0, [pc, #384]	; (8000ab8 <fsm_run0+0x2d8>)
 8000936:	f001 f976 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2108      	movs	r1, #8
 800093e:	485f      	ldr	r0, [pc, #380]	; (8000abc <fsm_run0+0x2dc>)
 8000940:	f001 f971 	bl	8001c26 <HAL_GPIO_WritePin>
		}
		if(counter0 < 0){
 8000944:	4b60      	ldr	r3, [pc, #384]	; (8000ac8 <fsm_run0+0x2e8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	da12      	bge.n	8000972 <fsm_run0+0x192>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	4859      	ldr	r0, [pc, #356]	; (8000ab8 <fsm_run0+0x2d8>)
 8000954:	f001 f967 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2108      	movs	r1, #8
 800095c:	4857      	ldr	r0, [pc, #348]	; (8000abc <fsm_run0+0x2dc>)
 800095e:	f001 f962 	bl	8001c26 <HAL_GPIO_WritePin>
			if(counter0 == -50){
 8000962:	4b59      	ldr	r3, [pc, #356]	; (8000ac8 <fsm_run0+0x2e8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f113 0f32 	cmn.w	r3, #50	; 0x32
 800096a:	d102      	bne.n	8000972 <fsm_run0+0x192>
				counter0 = 50;
 800096c:	4b56      	ldr	r3, [pc, #344]	; (8000ac8 <fsm_run0+0x2e8>)
 800096e:	2232      	movs	r2, #50	; 0x32
 8000970:	601a      	str	r2, [r3, #0]
			}
		}
		counter0--;
 8000972:	4b55      	ldr	r3, [pc, #340]	; (8000ac8 <fsm_run0+0x2e8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	4a53      	ldr	r2, [pc, #332]	; (8000ac8 <fsm_run0+0x2e8>)
 800097a:	6013      	str	r3, [r2, #0]
		break;
 800097c:	e0e7      	b.n	8000b4e <fsm_run0+0x36e>
	case MAN_GREEN:
		if(counter0 > 0){
 800097e:	4b52      	ldr	r3, [pc, #328]	; (8000ac8 <fsm_run0+0x2e8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	dd0a      	ble.n	800099c <fsm_run0+0x1bc>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	484a      	ldr	r0, [pc, #296]	; (8000ab8 <fsm_run0+0x2d8>)
 800098e:	f001 f94a 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2108      	movs	r1, #8
 8000996:	4849      	ldr	r0, [pc, #292]	; (8000abc <fsm_run0+0x2dc>)
 8000998:	f001 f945 	bl	8001c26 <HAL_GPIO_WritePin>
		}
		if(counter0 < 0){
 800099c:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <fsm_run0+0x2e8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	da12      	bge.n	80009ca <fsm_run0+0x1ea>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009aa:	4843      	ldr	r0, [pc, #268]	; (8000ab8 <fsm_run0+0x2d8>)
 80009ac:	f001 f93b 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2108      	movs	r1, #8
 80009b4:	4841      	ldr	r0, [pc, #260]	; (8000abc <fsm_run0+0x2dc>)
 80009b6:	f001 f936 	bl	8001c26 <HAL_GPIO_WritePin>
			if(counter0 == -50){
 80009ba:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <fsm_run0+0x2e8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f113 0f32 	cmn.w	r3, #50	; 0x32
 80009c2:	d102      	bne.n	80009ca <fsm_run0+0x1ea>
				counter0 = 50;
 80009c4:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <fsm_run0+0x2e8>)
 80009c6:	2232      	movs	r2, #50	; 0x32
 80009c8:	601a      	str	r2, [r3, #0]
			}
		}
		counter0--;
 80009ca:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <fsm_run0+0x2e8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	4a3d      	ldr	r2, [pc, #244]	; (8000ac8 <fsm_run0+0x2e8>)
 80009d2:	6013      	str	r3, [r2, #0]
		break;
 80009d4:	e0bb      	b.n	8000b4e <fsm_run0+0x36e>
	case TUNING_WAIT:
		if(timer3_flag == 1){
 80009d6:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <fsm_run0+0x2ec>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	f040 80ae 	bne.w	8000b3c <fsm_run0+0x35c>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e6:	4834      	ldr	r0, [pc, #208]	; (8000ab8 <fsm_run0+0x2d8>)
 80009e8:	f001 f91d 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2108      	movs	r1, #8
 80009f0:	4832      	ldr	r0, [pc, #200]	; (8000abc <fsm_run0+0x2dc>)
 80009f2:	f001 f918 	bl	8001c26 <HAL_GPIO_WritePin>
		}
		break;
 80009f6:	e0a1      	b.n	8000b3c <fsm_run0+0x35c>
	case TUNING_MODE:
		if(KeyReg1Counter == 1){
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <fsm_run0+0x2e4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d112      	bne.n	8000a26 <fsm_run0+0x246>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	482c      	ldr	r0, [pc, #176]	; (8000ab8 <fsm_run0+0x2d8>)
 8000a08:	f001 f90d 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2108      	movs	r1, #8
 8000a10:	482a      	ldr	r0, [pc, #168]	; (8000abc <fsm_run0+0x2dc>)
 8000a12:	f001 f908 	bl	8001c26 <HAL_GPIO_WritePin>
			setTimer3(500);
 8000a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1a:	f000 fb6d 	bl	80010f8 <setTimer3>
			status1 = TUNING_WAIT;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <fsm_run0+0x2d4>)
 8000a20:	2216      	movs	r2, #22
 8000a22:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, SET);
			setTimer3(500);
			status1 = TUNING_WAIT;
		}
		break;
 8000a24:	e08c      	b.n	8000b40 <fsm_run0+0x360>
		else if(KeyReg1Counter == 2){
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <fsm_run0+0x2e4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d112      	bne.n	8000a54 <fsm_run0+0x274>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a34:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <fsm_run0+0x2d8>)
 8000a36:	f001 f8f6 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	481f      	ldr	r0, [pc, #124]	; (8000abc <fsm_run0+0x2dc>)
 8000a40:	f001 f8f1 	bl	8001c26 <HAL_GPIO_WritePin>
			setTimer3(500);
 8000a44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a48:	f000 fb56 	bl	80010f8 <setTimer3>
			status1 = TUNING_WAIT;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <fsm_run0+0x2d4>)
 8000a4e:	2216      	movs	r2, #22
 8000a50:	601a      	str	r2, [r3, #0]
		break;
 8000a52:	e075      	b.n	8000b40 <fsm_run0+0x360>
		else if(KeyReg1Counter == 3){
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <fsm_run0+0x2e4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d171      	bne.n	8000b40 <fsm_run0+0x360>
			HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <fsm_run0+0x2d8>)
 8000a64:	f001 f8df 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <fsm_run0+0x2dc>)
 8000a6e:	f001 f8da 	bl	8001c26 <HAL_GPIO_WritePin>
			setTimer3(500);
 8000a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a76:	f000 fb3f 	bl	80010f8 <setTimer3>
			status1 = TUNING_WAIT;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <fsm_run0+0x2d4>)
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	601a      	str	r2, [r3, #0]
		break;
 8000a80:	e05e      	b.n	8000b40 <fsm_run0+0x360>
	//1-0
	case RED:
		HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <fsm_run0+0x2d8>)
 8000a8a:	f001 f8cc 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2108      	movs	r1, #8
 8000a92:	480a      	ldr	r0, [pc, #40]	; (8000abc <fsm_run0+0x2dc>)
 8000a94:	f001 f8c7 	bl	8001c26 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <fsm_run0+0x2f0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d151      	bne.n	8000b44 <fsm_run0+0x364>
			status1 = GREEN;
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <fsm_run0+0x2d4>)
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	601a      	str	r2, [r3, #0]
			setTimer1(setGreen0);
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <fsm_run0+0x2f4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 faec 	bl	8001088 <setTimer1>
		}
		break;
 8000ab0:	e048      	b.n	8000b44 <fsm_run0+0x364>
 8000ab2:	bf00      	nop
 8000ab4:	200000c0 	.word	0x200000c0
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	20000028 	.word	0x20000028
 8000ac4:	200000b8 	.word	0x200000b8
 8000ac8:	20000080 	.word	0x20000080
 8000acc:	200000d0 	.word	0x200000d0
 8000ad0:	200000c8 	.word	0x200000c8
 8000ad4:	20000030 	.word	0x20000030
	//0-1
	case GREEN:
		HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	481d      	ldr	r0, [pc, #116]	; (8000b54 <fsm_run0+0x374>)
 8000ae0:	f001 f8a1 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	481b      	ldr	r0, [pc, #108]	; (8000b58 <fsm_run0+0x378>)
 8000aea:	f001 f89c 	bl	8001c26 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <fsm_run0+0x37c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d128      	bne.n	8000b48 <fsm_run0+0x368>
			status1 = YELLOW;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <fsm_run0+0x380>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	601a      	str	r2, [r3, #0]
			setTimer1(setYellow0);
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <fsm_run0+0x384>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 fac1 	bl	8001088 <setTimer1>
		}
		break;
 8000b06:	e01f      	b.n	8000b48 <fsm_run0+0x368>
	case YELLOW:
		HAL_GPIO_WritePin(Traffic0_a_GPIO_Port, Traffic0_a_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0e:	4811      	ldr	r0, [pc, #68]	; (8000b54 <fsm_run0+0x374>)
 8000b10:	f001 f889 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic0_b_GPIO_Port, Traffic0_b_Pin, SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2108      	movs	r1, #8
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <fsm_run0+0x378>)
 8000b1a:	f001 f884 	bl	8001c26 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <fsm_run0+0x37c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d112      	bne.n	8000b4c <fsm_run0+0x36c>
			status1 = RED;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <fsm_run0+0x380>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
			setTimer1(setRed0);
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <fsm_run0+0x388>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 faa9 	bl	8001088 <setTimer1>
		}
		break;
 8000b36:	e009      	b.n	8000b4c <fsm_run0+0x36c>
	default:
		break;
 8000b38:	bf00      	nop
 8000b3a:	e008      	b.n	8000b4e <fsm_run0+0x36e>
		break;
 8000b3c:	bf00      	nop
 8000b3e:	e006      	b.n	8000b4e <fsm_run0+0x36e>
		break;
 8000b40:	bf00      	nop
 8000b42:	e004      	b.n	8000b4e <fsm_run0+0x36e>
		break;
 8000b44:	bf00      	nop
 8000b46:	e002      	b.n	8000b4e <fsm_run0+0x36e>
		break;
 8000b48:	bf00      	nop
 8000b4a:	e000      	b.n	8000b4e <fsm_run0+0x36e>
		break;
 8000b4c:	bf00      	nop
	}

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40010c00 	.word	0x40010c00
 8000b5c:	200000c8 	.word	0x200000c8
 8000b60:	200000c0 	.word	0x200000c0
 8000b64:	2000002c 	.word	0x2000002c
 8000b68:	20000028 	.word	0x20000028

08000b6c <fsm_run1>:


int counter1 = 50;
void fsm_run1(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	switch (status2){
 8000b70:	4bb3      	ldr	r3, [pc, #716]	; (8000e40 <fsm_run1+0x2d4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b16      	cmp	r3, #22
 8000b76:	f200 818c 	bhi.w	8000e92 <fsm_run1+0x326>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <fsm_run1+0x14>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000bdd 	.word	0x08000bdd
 8000b84:	08000e65 	.word	0x08000e65
 8000b88:	08000e11 	.word	0x08000e11
 8000b8c:	08000de3 	.word	0x08000de3
 8000b90:	08000c43 	.word	0x08000c43
 8000b94:	08000c97 	.word	0x08000c97
 8000b98:	08000ceb 	.word	0x08000ceb
 8000b9c:	08000e93 	.word	0x08000e93
 8000ba0:	08000e93 	.word	0x08000e93
 8000ba4:	08000e93 	.word	0x08000e93
 8000ba8:	08000e93 	.word	0x08000e93
 8000bac:	08000e93 	.word	0x08000e93
 8000bb0:	08000e93 	.word	0x08000e93
 8000bb4:	08000e93 	.word	0x08000e93
 8000bb8:	08000e93 	.word	0x08000e93
 8000bbc:	08000e93 	.word	0x08000e93
 8000bc0:	08000e93 	.word	0x08000e93
 8000bc4:	08000e93 	.word	0x08000e93
 8000bc8:	08000e93 	.word	0x08000e93
 8000bcc:	08000bf9 	.word	0x08000bf9
 8000bd0:	08000c0b 	.word	0x08000c0b
 8000bd4:	08000d5f 	.word	0x08000d5f
 8000bd8:	08000d3f 	.word	0x08000d3f
	case INIT:
		HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	4898      	ldr	r0, [pc, #608]	; (8000e44 <fsm_run1+0x2d8>)
 8000be2:	f001 f820 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	4896      	ldr	r0, [pc, #600]	; (8000e44 <fsm_run1+0x2d8>)
 8000bec:	f001 f81b 	bl	8001c26 <HAL_GPIO_WritePin>
		status2 = AUTOMATIC_MODE;
 8000bf0:	4b93      	ldr	r3, [pc, #588]	; (8000e40 <fsm_run1+0x2d4>)
 8000bf2:	2213      	movs	r2, #19
 8000bf4:	601a      	str	r2, [r3, #0]
		break;
 8000bf6:	e157      	b.n	8000ea8 <fsm_run1+0x33c>
	case AUTOMATIC_MODE:
		status2 = GREEN;
 8000bf8:	4b91      	ldr	r3, [pc, #580]	; (8000e40 <fsm_run1+0x2d4>)
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	601a      	str	r2, [r3, #0]
		setTimer2(setGreen1);
 8000bfe:	4b92      	ldr	r3, [pc, #584]	; (8000e48 <fsm_run1+0x2dc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fa5c 	bl	80010c0 <setTimer2>
		break;
 8000c08:	e14e      	b.n	8000ea8 <fsm_run1+0x33c>
	case MANUAL_MODE:
		if(KeyReg1Counter == 1){
 8000c0a:	4b90      	ldr	r3, [pc, #576]	; (8000e4c <fsm_run1+0x2e0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d103      	bne.n	8000c1a <fsm_run1+0xae>
			status2 = MAN_RED;
 8000c12:	4b8b      	ldr	r3, [pc, #556]	; (8000e40 <fsm_run1+0x2d4>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	601a      	str	r2, [r3, #0]
			status2 = MAN_GREEN;
		}
		else {
			status2 = AUTOMATIC_MODE;
		}
		break;
 8000c18:	e146      	b.n	8000ea8 <fsm_run1+0x33c>
		else if(KeyReg1Counter == 2){
 8000c1a:	4b8c      	ldr	r3, [pc, #560]	; (8000e4c <fsm_run1+0x2e0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d103      	bne.n	8000c2a <fsm_run1+0xbe>
			status2 = MAN_YELLOW;
 8000c22:	4b87      	ldr	r3, [pc, #540]	; (8000e40 <fsm_run1+0x2d4>)
 8000c24:	2205      	movs	r2, #5
 8000c26:	601a      	str	r2, [r3, #0]
		break;
 8000c28:	e13e      	b.n	8000ea8 <fsm_run1+0x33c>
		else if(KeyReg1Counter == 3){
 8000c2a:	4b88      	ldr	r3, [pc, #544]	; (8000e4c <fsm_run1+0x2e0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d103      	bne.n	8000c3a <fsm_run1+0xce>
			status2 = MAN_GREEN;
 8000c32:	4b83      	ldr	r3, [pc, #524]	; (8000e40 <fsm_run1+0x2d4>)
 8000c34:	2206      	movs	r2, #6
 8000c36:	601a      	str	r2, [r3, #0]
		break;
 8000c38:	e136      	b.n	8000ea8 <fsm_run1+0x33c>
			status2 = AUTOMATIC_MODE;
 8000c3a:	4b81      	ldr	r3, [pc, #516]	; (8000e40 <fsm_run1+0x2d4>)
 8000c3c:	2213      	movs	r2, #19
 8000c3e:	601a      	str	r2, [r3, #0]
		break;
 8000c40:	e132      	b.n	8000ea8 <fsm_run1+0x33c>
	case MAN_RED:
		if(counter1 > 0){
 8000c42:	4b83      	ldr	r3, [pc, #524]	; (8000e50 <fsm_run1+0x2e4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	dd09      	ble.n	8000c5e <fsm_run1+0xf2>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	487d      	ldr	r0, [pc, #500]	; (8000e44 <fsm_run1+0x2d8>)
 8000c50:	f000 ffe9 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2120      	movs	r1, #32
 8000c58:	487a      	ldr	r0, [pc, #488]	; (8000e44 <fsm_run1+0x2d8>)
 8000c5a:	f000 ffe4 	bl	8001c26 <HAL_GPIO_WritePin>
		}
		if(counter1 < 0){
 8000c5e:	4b7c      	ldr	r3, [pc, #496]	; (8000e50 <fsm_run1+0x2e4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da11      	bge.n	8000c8a <fsm_run1+0x11e>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2110      	movs	r1, #16
 8000c6a:	4876      	ldr	r0, [pc, #472]	; (8000e44 <fsm_run1+0x2d8>)
 8000c6c:	f000 ffdb 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2120      	movs	r1, #32
 8000c74:	4873      	ldr	r0, [pc, #460]	; (8000e44 <fsm_run1+0x2d8>)
 8000c76:	f000 ffd6 	bl	8001c26 <HAL_GPIO_WritePin>
			if(counter1 == -50){
 8000c7a:	4b75      	ldr	r3, [pc, #468]	; (8000e50 <fsm_run1+0x2e4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8000c82:	d102      	bne.n	8000c8a <fsm_run1+0x11e>
				counter1 = 50;
 8000c84:	4b72      	ldr	r3, [pc, #456]	; (8000e50 <fsm_run1+0x2e4>)
 8000c86:	2232      	movs	r2, #50	; 0x32
 8000c88:	601a      	str	r2, [r3, #0]
			}
		}
		counter1--;
 8000c8a:	4b71      	ldr	r3, [pc, #452]	; (8000e50 <fsm_run1+0x2e4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	4a6f      	ldr	r2, [pc, #444]	; (8000e50 <fsm_run1+0x2e4>)
 8000c92:	6013      	str	r3, [r2, #0]
		break;
 8000c94:	e108      	b.n	8000ea8 <fsm_run1+0x33c>
	case MAN_YELLOW:
		if(counter1 > 0){
 8000c96:	4b6e      	ldr	r3, [pc, #440]	; (8000e50 <fsm_run1+0x2e4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dd09      	ble.n	8000cb2 <fsm_run1+0x146>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2110      	movs	r1, #16
 8000ca2:	4868      	ldr	r0, [pc, #416]	; (8000e44 <fsm_run1+0x2d8>)
 8000ca4:	f000 ffbf 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2120      	movs	r1, #32
 8000cac:	4865      	ldr	r0, [pc, #404]	; (8000e44 <fsm_run1+0x2d8>)
 8000cae:	f000 ffba 	bl	8001c26 <HAL_GPIO_WritePin>
		}
		if(counter1 < 0){
 8000cb2:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <fsm_run1+0x2e4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da11      	bge.n	8000cde <fsm_run1+0x172>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	4861      	ldr	r0, [pc, #388]	; (8000e44 <fsm_run1+0x2d8>)
 8000cc0:	f000 ffb1 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	485e      	ldr	r0, [pc, #376]	; (8000e44 <fsm_run1+0x2d8>)
 8000cca:	f000 ffac 	bl	8001c26 <HAL_GPIO_WritePin>
			if(counter1 == -50){
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <fsm_run1+0x2e4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8000cd6:	d102      	bne.n	8000cde <fsm_run1+0x172>
				counter1 = 50;
 8000cd8:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <fsm_run1+0x2e4>)
 8000cda:	2232      	movs	r2, #50	; 0x32
 8000cdc:	601a      	str	r2, [r3, #0]
			}
		}
		counter1--;
 8000cde:	4b5c      	ldr	r3, [pc, #368]	; (8000e50 <fsm_run1+0x2e4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	4a5a      	ldr	r2, [pc, #360]	; (8000e50 <fsm_run1+0x2e4>)
 8000ce6:	6013      	str	r3, [r2, #0]
		break;
 8000ce8:	e0de      	b.n	8000ea8 <fsm_run1+0x33c>
	case MAN_GREEN:
		if(counter1 > 0){
 8000cea:	4b59      	ldr	r3, [pc, #356]	; (8000e50 <fsm_run1+0x2e4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	dd09      	ble.n	8000d06 <fsm_run1+0x19a>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4853      	ldr	r0, [pc, #332]	; (8000e44 <fsm_run1+0x2d8>)
 8000cf8:	f000 ff95 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4850      	ldr	r0, [pc, #320]	; (8000e44 <fsm_run1+0x2d8>)
 8000d02:	f000 ff90 	bl	8001c26 <HAL_GPIO_WritePin>
		}
		if(counter1 < 0){
 8000d06:	4b52      	ldr	r3, [pc, #328]	; (8000e50 <fsm_run1+0x2e4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	da11      	bge.n	8000d32 <fsm_run1+0x1c6>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2110      	movs	r1, #16
 8000d12:	484c      	ldr	r0, [pc, #304]	; (8000e44 <fsm_run1+0x2d8>)
 8000d14:	f000 ff87 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2120      	movs	r1, #32
 8000d1c:	4849      	ldr	r0, [pc, #292]	; (8000e44 <fsm_run1+0x2d8>)
 8000d1e:	f000 ff82 	bl	8001c26 <HAL_GPIO_WritePin>
			if(counter1 == -50){
 8000d22:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <fsm_run1+0x2e4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8000d2a:	d102      	bne.n	8000d32 <fsm_run1+0x1c6>
				counter1 = 50;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <fsm_run1+0x2e4>)
 8000d2e:	2232      	movs	r2, #50	; 0x32
 8000d30:	601a      	str	r2, [r3, #0]
			}
		}
		counter1--;
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <fsm_run1+0x2e4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a45      	ldr	r2, [pc, #276]	; (8000e50 <fsm_run1+0x2e4>)
 8000d3a:	6013      	str	r3, [r2, #0]
		break;
 8000d3c:	e0b4      	b.n	8000ea8 <fsm_run1+0x33c>
	case TUNING_WAIT:
		if(timer3_flag == 1){
 8000d3e:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <fsm_run1+0x2e8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	f040 80a7 	bne.w	8000e96 <fsm_run1+0x32a>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	483d      	ldr	r0, [pc, #244]	; (8000e44 <fsm_run1+0x2d8>)
 8000d4e:	f000 ff6a 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2120      	movs	r1, #32
 8000d56:	483b      	ldr	r0, [pc, #236]	; (8000e44 <fsm_run1+0x2d8>)
 8000d58:	f000 ff65 	bl	8001c26 <HAL_GPIO_WritePin>
		}
		break;
 8000d5c:	e09b      	b.n	8000e96 <fsm_run1+0x32a>
	case TUNING_MODE:
		if(KeyReg1Counter == 1){
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <fsm_run1+0x2e0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d111      	bne.n	8000d8a <fsm_run1+0x21e>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2110      	movs	r1, #16
 8000d6a:	4836      	ldr	r0, [pc, #216]	; (8000e44 <fsm_run1+0x2d8>)
 8000d6c:	f000 ff5b 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2120      	movs	r1, #32
 8000d74:	4833      	ldr	r0, [pc, #204]	; (8000e44 <fsm_run1+0x2d8>)
 8000d76:	f000 ff56 	bl	8001c26 <HAL_GPIO_WritePin>
			setTimer3(500);
 8000d7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7e:	f000 f9bb 	bl	80010f8 <setTimer3>
			status2 = TUNING_WAIT;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <fsm_run1+0x2d4>)
 8000d84:	2216      	movs	r2, #22
 8000d86:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, SET);
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
			setTimer3(500);
			status2 = TUNING_WAIT;
		}
		break;
 8000d88:	e087      	b.n	8000e9a <fsm_run1+0x32e>
		else if(KeyReg1Counter == 2){
 8000d8a:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <fsm_run1+0x2e0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d111      	bne.n	8000db6 <fsm_run1+0x24a>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2110      	movs	r1, #16
 8000d96:	482b      	ldr	r0, [pc, #172]	; (8000e44 <fsm_run1+0x2d8>)
 8000d98:	f000 ff45 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2120      	movs	r1, #32
 8000da0:	4828      	ldr	r0, [pc, #160]	; (8000e44 <fsm_run1+0x2d8>)
 8000da2:	f000 ff40 	bl	8001c26 <HAL_GPIO_WritePin>
			setTimer3(500);
 8000da6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000daa:	f000 f9a5 	bl	80010f8 <setTimer3>
			status2 = TUNING_WAIT;
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <fsm_run1+0x2d4>)
 8000db0:	2216      	movs	r2, #22
 8000db2:	601a      	str	r2, [r3, #0]
		break;
 8000db4:	e071      	b.n	8000e9a <fsm_run1+0x32e>
		else if(KeyReg1Counter == 3){
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <fsm_run1+0x2e0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d16d      	bne.n	8000e9a <fsm_run1+0x32e>
			HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	4820      	ldr	r0, [pc, #128]	; (8000e44 <fsm_run1+0x2d8>)
 8000dc4:	f000 ff2f 	bl	8001c26 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2120      	movs	r1, #32
 8000dcc:	481d      	ldr	r0, [pc, #116]	; (8000e44 <fsm_run1+0x2d8>)
 8000dce:	f000 ff2a 	bl	8001c26 <HAL_GPIO_WritePin>
			setTimer3(500);
 8000dd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd6:	f000 f98f 	bl	80010f8 <setTimer3>
			status2 = TUNING_WAIT;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <fsm_run1+0x2d4>)
 8000ddc:	2216      	movs	r2, #22
 8000dde:	601a      	str	r2, [r3, #0]
		break;
 8000de0:	e05b      	b.n	8000e9a <fsm_run1+0x32e>
	case GREEN:
		HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2110      	movs	r1, #16
 8000de6:	4817      	ldr	r0, [pc, #92]	; (8000e44 <fsm_run1+0x2d8>)
 8000de8:	f000 ff1d 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2120      	movs	r1, #32
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <fsm_run1+0x2d8>)
 8000df2:	f000 ff18 	bl	8001c26 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <fsm_run1+0x2ec>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d14f      	bne.n	8000e9e <fsm_run1+0x332>
			status2 = YELLOW;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <fsm_run1+0x2d4>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	601a      	str	r2, [r3, #0]
			setTimer2(setYellow1);
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <fsm_run1+0x2f0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f959 	bl	80010c0 <setTimer2>
		}
		break;
 8000e0e:	e046      	b.n	8000e9e <fsm_run1+0x332>
	case YELLOW:
		HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <fsm_run1+0x2d8>)
 8000e16:	f000 ff06 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4809      	ldr	r0, [pc, #36]	; (8000e44 <fsm_run1+0x2d8>)
 8000e20:	f000 ff01 	bl	8001c26 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <fsm_run1+0x2ec>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d13a      	bne.n	8000ea2 <fsm_run1+0x336>
			status2 = RED;
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <fsm_run1+0x2d4>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
			setTimer2(setRed1);
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <fsm_run1+0x2f4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f942 	bl	80010c0 <setTimer2>
		}
		break;
 8000e3c:	e031      	b.n	8000ea2 <fsm_run1+0x336>
 8000e3e:	bf00      	nop
 8000e40:	200000c4 	.word	0x200000c4
 8000e44:	40010c00 	.word	0x40010c00
 8000e48:	20000048 	.word	0x20000048
 8000e4c:	200000b8 	.word	0x200000b8
 8000e50:	20000084 	.word	0x20000084
 8000e54:	200000d0 	.word	0x200000d0
 8000e58:	200000cc 	.word	0x200000cc
 8000e5c:	20000044 	.word	0x20000044
 8000e60:	20000040 	.word	0x20000040
	case RED:
		HAL_GPIO_WritePin(Traffic1_a_GPIO_Port, Traffic1_a_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2110      	movs	r1, #16
 8000e68:	4810      	ldr	r0, [pc, #64]	; (8000eac <fsm_run1+0x340>)
 8000e6a:	f000 fedc 	bl	8001c26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Traffic1_b_GPIO_Port, Traffic1_b_Pin, SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2120      	movs	r1, #32
 8000e72:	480e      	ldr	r0, [pc, #56]	; (8000eac <fsm_run1+0x340>)
 8000e74:	f000 fed7 	bl	8001c26 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <fsm_run1+0x344>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d112      	bne.n	8000ea6 <fsm_run1+0x33a>
			status2 = GREEN;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <fsm_run1+0x348>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	601a      	str	r2, [r3, #0]
			setTimer2(setGreen1);
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <fsm_run1+0x34c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f918 	bl	80010c0 <setTimer2>
		}
		break;
 8000e90:	e009      	b.n	8000ea6 <fsm_run1+0x33a>
	default:
		break;
 8000e92:	bf00      	nop
 8000e94:	e008      	b.n	8000ea8 <fsm_run1+0x33c>
		break;
 8000e96:	bf00      	nop
 8000e98:	e006      	b.n	8000ea8 <fsm_run1+0x33c>
		break;
 8000e9a:	bf00      	nop
 8000e9c:	e004      	b.n	8000ea8 <fsm_run1+0x33c>
		break;
 8000e9e:	bf00      	nop
 8000ea0:	e002      	b.n	8000ea8 <fsm_run1+0x33c>
		break;
 8000ea2:	bf00      	nop
 8000ea4:	e000      	b.n	8000ea8 <fsm_run1+0x33c>
		break;
 8000ea6:	bf00      	nop
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	200000cc 	.word	0x200000cc
 8000eb4:	200000c4 	.word	0x200000c4
 8000eb8:	20000048 	.word	0x20000048

08000ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a27      	ldr	r2, [pc, #156]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PES_LED_1_Pin|Traffic0_b_Pin|Traffic1_a_Pin|Traffic1_b_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f06:	4822      	ldr	r0, [pc, #136]	; (8000f90 <MX_GPIO_Init+0xd4>)
 8000f08:	f000 fe8d 	bl	8001c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PES_LED_0_Pin|Traffic0_a_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f12:	4820      	ldr	r0, [pc, #128]	; (8000f94 <MX_GPIO_Init+0xd8>)
 8000f14:	f000 fe87 	bl	8001c26 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8000f18:	2313      	movs	r3, #19
 8000f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <MX_GPIO_Init+0xd8>)
 8000f2c:	f000 fce0 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000f30:	2301      	movs	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	4813      	ldr	r0, [pc, #76]	; (8000f90 <MX_GPIO_Init+0xd4>)
 8000f44:	f000 fcd4 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PES_LED_1_Pin|Traffic0_b_Pin|Traffic1_a_Pin|Traffic1_b_Pin;
 8000f48:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000f4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2302      	movs	r3, #2
 8000f58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <MX_GPIO_Init+0xd4>)
 8000f62:	f000 fcc5 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = PES_LED_0_Pin|Traffic0_a_Pin;
 8000f66:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2302      	movs	r3, #2
 8000f76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_GPIO_Init+0xd8>)
 8000f80:	f000 fcb6 	bl	80018f0 <HAL_GPIO_Init>

}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010c00 	.word	0x40010c00
 8000f94:	40010800 	.word	0x40010800

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f000 fb38 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f812 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f7ff ff8a 	bl	8000ebc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa8:	f000 f9d8 	bl	800135c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fac:	f000 fa22 	bl	80013f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <main+0x28>)
 8000fb2:	f001 fa89 	bl	80024c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <main+0x2c>)
 8000fba:	f001 fb2f 	bl	800261c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <main+0x26>
 8000fc0:	20000138 	.word	0x20000138
 8000fc4:	200000f0 	.word	0x200000f0

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b090      	sub	sp, #64	; 0x40
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	2228      	movs	r2, #40	; 0x28
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 f9a8 	bl	800332c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fe26 	bl	8001c58 <HAL_RCC_OscConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001012:	f000 f833 	bl	800107c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001016:	230f      	movs	r3, #15
 8001018:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101a:	2302      	movs	r3, #2
 800101c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f891 	bl	8002158 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800103c:	f000 f81e 	bl	800107c <Error_Handler>
  }
}
 8001040:	bf00      	nop
 8001042:	3740      	adds	r7, #64	; 0x40
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	fsm_run0();
 8001050:	f7ff fbc6 	bl	80007e0 <fsm_run0>
	fsm_run1();
 8001054:	f7ff fd8a 	bl	8000b6c <fsm_run1>
	//updateManual();
	timerRun(); //every 10ms
 8001058:	f000 f8a2 	bl	80011a0 <timerRun>
	getKeyInput1();
 800105c:	f7ff f89a 	bl	8000194 <getKeyInput1>
	getKeyInput2();
 8001060:	f7ff f9a0 	bl	80003a4 <getKeyInput2>
	getKeyInput3();
 8001064:	f7ff fa3c 	bl	80004e0 <getKeyInput3>
	getKeyInput4();
 8001068:	f7ff fabe 	bl	80005e8 <getKeyInput4>
	pes_run();
 800106c:	f7ff fb46 	bl	80006fc <pes_run>
	buzzer_run();
 8001070:	f7ff fb0c 	bl	800068c <buzzer_run>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <setTimer1>:
int timer2_counter = 0;
int timer3_counter = 0;
int timer4_counter = 0;
int pulse_counter = 0;

void setTimer1(int duration){
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TICK;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <setTimer1+0x2c>)
 8001094:	fb82 1203 	smull	r1, r2, r2, r3
 8001098:	1092      	asrs	r2, r2, #2
 800109a:	17db      	asrs	r3, r3, #31
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <setTimer1+0x30>)
 80010a0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <setTimer1+0x34>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	66666667 	.word	0x66666667
 80010b8:	200000dc 	.word	0x200000dc
 80010bc:	200000c8 	.word	0x200000c8

080010c0 <setTimer2>:
void setTimer2(int duration){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TICK;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <setTimer2+0x2c>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1092      	asrs	r2, r2, #2
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <setTimer2+0x30>)
 80010d8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <setTimer2+0x34>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	66666667 	.word	0x66666667
 80010f0:	200000e0 	.word	0x200000e0
 80010f4:	200000cc 	.word	0x200000cc

080010f8 <setTimer3>:
void setTimer3(int duration){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TICK;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <setTimer3+0x2c>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1092      	asrs	r2, r2, #2
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	4a06      	ldr	r2, [pc, #24]	; (8001128 <setTimer3+0x30>)
 8001110:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <setTimer3+0x34>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	66666667 	.word	0x66666667
 8001128:	200000e4 	.word	0x200000e4
 800112c:	200000d0 	.word	0x200000d0

08001130 <setTimer4>:
void setTimer4(int duration){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TICK;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <setTimer4+0x2c>)
 800113c:	fb82 1203 	smull	r1, r2, r2, r3
 8001140:	1092      	asrs	r2, r2, #2
 8001142:	17db      	asrs	r3, r3, #31
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	4a06      	ldr	r2, [pc, #24]	; (8001160 <setTimer4+0x30>)
 8001148:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <setTimer4+0x34>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	66666667 	.word	0x66666667
 8001160:	200000e8 	.word	0x200000e8
 8001164:	200000d4 	.word	0x200000d4

08001168 <setPulse>:
void setPulse(int duration){
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	pulse_counter = duration / TICK;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <setPulse+0x2c>)
 8001174:	fb82 1203 	smull	r1, r2, r2, r3
 8001178:	1092      	asrs	r2, r2, #2
 800117a:	17db      	asrs	r3, r3, #31
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <setPulse+0x30>)
 8001180:	6013      	str	r3, [r2, #0]
	pulse_flag = 0;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <setPulse+0x34>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	66666667 	.word	0x66666667
 8001198:	200000ec 	.word	0x200000ec
 800119c:	200000d8 	.word	0x200000d8

080011a0 <timerRun>:
void timerRun(){
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <timerRun+0xac>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd0b      	ble.n	80011c4 <timerRun+0x24>
		timer1_counter--;
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <timerRun+0xac>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	4a26      	ldr	r2, [pc, #152]	; (800124c <timerRun+0xac>)
 80011b4:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) timer1_flag = 1;
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <timerRun+0xac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc02      	bgt.n	80011c4 <timerRun+0x24>
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <timerRun+0xb0>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <timerRun+0xb4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	dd0b      	ble.n	80011e4 <timerRun+0x44>
		timer2_counter--;
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <timerRun+0xb4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a20      	ldr	r2, [pc, #128]	; (8001254 <timerRun+0xb4>)
 80011d4:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) timer2_flag = 1;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <timerRun+0xb4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	dc02      	bgt.n	80011e4 <timerRun+0x44>
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <timerRun+0xb8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <timerRun+0xbc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dd0b      	ble.n	8001204 <timerRun+0x64>
		timer3_counter--;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <timerRun+0xbc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <timerRun+0xbc>)
 80011f4:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) timer3_flag = 1;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <timerRun+0xbc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dc02      	bgt.n	8001204 <timerRun+0x64>
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <timerRun+0xc0>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter > 0){
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <timerRun+0xc4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dd0b      	ble.n	8001224 <timerRun+0x84>
		timer4_counter--;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <timerRun+0xc4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <timerRun+0xc4>)
 8001214:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) timer4_flag = 1;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <timerRun+0xc4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dc02      	bgt.n	8001224 <timerRun+0x84>
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <timerRun+0xc8>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
	}
	if(pulse_counter > 0){
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <timerRun+0xcc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	dd0b      	ble.n	8001244 <timerRun+0xa4>
		pulse_counter--;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <timerRun+0xcc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3b01      	subs	r3, #1
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <timerRun+0xcc>)
 8001234:	6013      	str	r3, [r2, #0]
		if(pulse_counter <= 0) pulse_flag = 1;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <timerRun+0xcc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	dc02      	bgt.n	8001244 <timerRun+0xa4>
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <timerRun+0xd0>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
	}
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	200000dc 	.word	0x200000dc
 8001250:	200000c8 	.word	0x200000c8
 8001254:	200000e0 	.word	0x200000e0
 8001258:	200000cc 	.word	0x200000cc
 800125c:	200000e4 	.word	0x200000e4
 8001260:	200000d0 	.word	0x200000d0
 8001264:	200000e8 	.word	0x200000e8
 8001268:	200000d4 	.word	0x200000d4
 800126c:	200000ec 	.word	0x200000ec
 8001270:	200000d8 	.word	0x200000d8

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_MspInit+0x5c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_MspInit+0x5c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_MspInit+0x60>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_MspInit+0x60>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131e:	f000 f9bd 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM2_IRQHandler+0x10>)
 800132e:	f001 fa17 	bl	8002760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000138 	.word	0x20000138

0800133c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM3_IRQHandler+0x10>)
 8001342:	f001 fa0d 	bl	8002760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000f0 	.word	0x200000f0

08001350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_TIM2_Init+0x94>)
 800137a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800137e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_TIM2_Init+0x94>)
 8001382:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001386:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_TIM2_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_TIM2_Init+0x94>)
 8001390:	2209      	movs	r2, #9
 8001392:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_TIM2_Init+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_TIM2_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_TIM2_Init+0x94>)
 80013a2:	f001 f841 	bl	8002428 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013ac:	f7ff fe66 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_TIM2_Init+0x94>)
 80013be:	f001 fb95 	bl	8002aec <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013c8:	f7ff fe58 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_TIM2_Init+0x94>)
 80013da:	f001 ff13 	bl	8003204 <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f7ff fe4a 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000138 	.word	0x20000138

080013f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_TIM3_Init+0xe4>)
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <MX_TIM3_Init+0xe8>)
 8001428:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_TIM3_Init+0xe4>)
 800142c:	223f      	movs	r2, #63	; 0x3f
 800142e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <MX_TIM3_Init+0xe4>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_TIM3_Init+0xe4>)
 8001438:	f240 32e7 	movw	r2, #999	; 0x3e7
 800143c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_TIM3_Init+0xe4>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <MX_TIM3_Init+0xe4>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144a:	4823      	ldr	r0, [pc, #140]	; (80014d8 <MX_TIM3_Init+0xe4>)
 800144c:	f000 ffec 	bl	8002428 <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001456:	f7ff fe11 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001464:	4619      	mov	r1, r3
 8001466:	481c      	ldr	r0, [pc, #112]	; (80014d8 <MX_TIM3_Init+0xe4>)
 8001468:	f001 fb40 	bl	8002aec <HAL_TIM_ConfigClockSource>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001472:	f7ff fe03 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001476:	4818      	ldr	r0, [pc, #96]	; (80014d8 <MX_TIM3_Init+0xe4>)
 8001478:	f001 f878 	bl	800256c <HAL_TIM_PWM_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001482:	f7ff fdfb 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	4619      	mov	r1, r3
 8001494:	4810      	ldr	r0, [pc, #64]	; (80014d8 <MX_TIM3_Init+0xe4>)
 8001496:	f001 feb5 	bl	8003204 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014a0:	f7ff fdec 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a4:	2360      	movs	r3, #96	; 0x60
 80014a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM3_Init+0xe4>)
 80014bc:	f001 fa58 	bl	8002970 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014c6:	f7ff fdd9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM3_Init+0xe4>)
 80014cc:	f000 f848 	bl	8001560 <HAL_TIM_MspPostInit>

}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200000f0 	.word	0x200000f0
 80014dc:	40000400 	.word	0x40000400

080014e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d114      	bne.n	800151c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_TIM_Base_MspInit+0x78>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_TIM_Base_MspInit+0x78>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_TIM_Base_MspInit+0x78>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	201c      	movs	r0, #28
 8001510:	f000 f9b7 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001514:	201c      	movs	r0, #28
 8001516:	f000 f9d0 	bl	80018ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800151a:	e018      	b.n	800154e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_TIM_Base_MspInit+0x7c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d113      	bne.n	800154e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_TIM_Base_MspInit+0x78>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_TIM_Base_MspInit+0x78>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_TIM_Base_MspInit+0x78>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	201d      	movs	r0, #29
 8001544:	f000 f99d 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001548:	201d      	movs	r0, #29
 800154a:	f000 f9b6 	bl	80018ba <HAL_NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	40000400 	.word	0x40000400

08001560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_TIM_MspPostInit+0x58>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d117      	bne.n	80015b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_TIM_MspPostInit+0x5c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_TIM_MspPostInit+0x5c>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_TIM_MspPostInit+0x5c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_TIM_MspPostInit+0x60>)
 80015ac:	f000 f9a0 	bl	80018f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40000400 	.word	0x40000400
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800

080015c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	; (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ea:	f7ff feb1 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f001 fe79 	bl	80032e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f2:	f7ff fcd1 	bl	8000f98 <main>
  bx lr
 80015f6:	4770      	bx	lr
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001600:	0800337c 	.word	0x0800337c
  ldr r2, =_sbss
 8001604:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001608:	20000184 	.word	0x20000184

0800160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x28>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f923 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fe22 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f93b 	bl	80018d6 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f903 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000090 	.word	0x20000090
 8001694:	20000098 	.word	0x20000098
 8001698:	20000094 	.word	0x20000094

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x20>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000098 	.word	0x20000098
 80016bc:	20000180 	.word	0x20000180

080016c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	20000180 	.word	0x20000180

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff90 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff2d 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b08b      	sub	sp, #44	; 0x2c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	e169      	b.n	8001bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001904:	2201      	movs	r2, #1
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8158 	bne.w	8001bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a9a      	ldr	r2, [pc, #616]	; (8001b90 <HAL_GPIO_Init+0x2a0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d05e      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800192c:	4a98      	ldr	r2, [pc, #608]	; (8001b90 <HAL_GPIO_Init+0x2a0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d875      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001932:	4a98      	ldr	r2, [pc, #608]	; (8001b94 <HAL_GPIO_Init+0x2a4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d058      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001938:	4a96      	ldr	r2, [pc, #600]	; (8001b94 <HAL_GPIO_Init+0x2a4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d86f      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800193e:	4a96      	ldr	r2, [pc, #600]	; (8001b98 <HAL_GPIO_Init+0x2a8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d052      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001944:	4a94      	ldr	r2, [pc, #592]	; (8001b98 <HAL_GPIO_Init+0x2a8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d869      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800194a:	4a94      	ldr	r2, [pc, #592]	; (8001b9c <HAL_GPIO_Init+0x2ac>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d04c      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001950:	4a92      	ldr	r2, [pc, #584]	; (8001b9c <HAL_GPIO_Init+0x2ac>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d863      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001956:	4a92      	ldr	r2, [pc, #584]	; (8001ba0 <HAL_GPIO_Init+0x2b0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d046      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800195c:	4a90      	ldr	r2, [pc, #576]	; (8001ba0 <HAL_GPIO_Init+0x2b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d85d      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d82a      	bhi.n	80019bc <HAL_GPIO_Init+0xcc>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d859      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_GPIO_Init+0x80>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019d7 	.word	0x080019d7
 800197c:	08001a19 	.word	0x08001a19
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a1f 	.word	0x08001a1f
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a1f 	.word	0x08001a1f
 8001990:	08001a1f 	.word	0x08001a1f
 8001994:	08001a1f 	.word	0x08001a1f
 8001998:	08001a1f 	.word	0x08001a1f
 800199c:	08001a1f 	.word	0x08001a1f
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	08001a1f 	.word	0x08001a1f
 80019a8:	08001a1f 	.word	0x08001a1f
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a1f 	.word	0x08001a1f
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019e1 	.word	0x080019e1
 80019bc:	4a79      	ldr	r2, [pc, #484]	; (8001ba4 <HAL_GPIO_Init+0x2b4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c2:	e02c      	b.n	8001a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e029      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e024      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	3308      	adds	r3, #8
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e01f      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	330c      	adds	r3, #12
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e01a      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f2:	2304      	movs	r3, #4
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e013      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	611a      	str	r2, [r3, #16]
          break;
 8001a0a:	e009      	b.n	8001a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	615a      	str	r2, [r3, #20]
          break;
 8001a16:	e003      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          break;
 8001a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d801      	bhi.n	8001a2a <HAL_GPIO_Init+0x13a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_Init+0x13e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d802      	bhi.n	8001a3c <HAL_GPIO_Init+0x14c>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x152>
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	3b08      	subs	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	210f      	movs	r1, #15
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80b1 	beq.w	8001bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a70:	4b4d      	ldr	r3, [pc, #308]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a4c      	ldr	r2, [pc, #304]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_GPIO_Init+0x2bc>)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a40      	ldr	r2, [pc, #256]	; (8001bb0 <HAL_GPIO_Init+0x2c0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x1ec>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3f      	ldr	r2, [pc, #252]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x1e8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3e      	ldr	r2, [pc, #248]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x1e4>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3d      	ldr	r2, [pc, #244]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x1e0>
 8001acc:	2303      	movs	r3, #3
 8001ace:	e006      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e004      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e002      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <HAL_GPIO_Init+0x1ee>
 8001adc:	2300      	movs	r3, #0
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	f002 0203 	and.w	r2, r2, #3
 8001ae4:	0092      	lsls	r2, r2, #2
 8001ae6:	4093      	lsls	r3, r2
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <HAL_GPIO_Init+0x2bc>)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	492c      	ldr	r1, [pc, #176]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4928      	ldr	r1, [pc, #160]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b30:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	491e      	ldr	r1, [pc, #120]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4918      	ldr	r1, [pc, #96]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4914      	ldr	r1, [pc, #80]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d021      	beq.n	8001bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60cb      	str	r3, [r1, #12]
 8001b8c:	e021      	b.n	8001bd2 <HAL_GPIO_Init+0x2e2>
 8001b8e:	bf00      	nop
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40011400 	.word	0x40011400
 8001bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	4909      	ldr	r1, [pc, #36]	; (8001bf4 <HAL_GPIO_Init+0x304>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f47f ae8e 	bne.w	8001904 <HAL_GPIO_Init+0x14>
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	372c      	adds	r7, #44	; 0x2c
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	807b      	strh	r3, [r7, #2]
 8001c32:	4613      	mov	r3, r2
 8001c34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c36:	787b      	ldrb	r3, [r7, #1]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3c:	887a      	ldrh	r2, [r7, #2]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c42:	e003      	b.n	8001c4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	041a      	lsls	r2, r3, #16
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	611a      	str	r2, [r3, #16]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e26c      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8087 	beq.w	8001d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c78:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d00c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c84:	4b8f      	ldr	r3, [pc, #572]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d112      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5e>
 8001c90:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9e:	4b89      	ldr	r3, [pc, #548]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d06c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x12c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d168      	bne.n	8001d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e246      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x76>
 8001cc0:	4b80      	ldr	r3, [pc, #512]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a7f      	ldr	r2, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e02e      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x98>
 8001cd6:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7a      	ldr	r2, [pc, #488]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b78      	ldr	r3, [pc, #480]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a77      	ldr	r2, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0xbc>
 8001cfa:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a71      	ldr	r2, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6e      	ldr	r2, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xd4>
 8001d14:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6a      	ldr	r2, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a67      	ldr	r2, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fcc4 	bl	80016c0 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fcc0 	bl	80016c0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1fa      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xe4>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fcb0 	bl	80016c0 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff fcac 	bl	80016c0 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1e6      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x10c>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d92:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d9e:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d11c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x18c>
 8001daa:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x176>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1ba      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4939      	ldr	r1, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e03a      	b.n	8001e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff fc65 	bl	80016c0 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fc61 	bl	80016c0 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e19b      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4927      	ldr	r1, [pc, #156]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <HAL_RCC_OscConfig+0x270>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fc44 	bl	80016c0 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fc40 	bl	80016c0 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e17a      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d03a      	beq.n	8001edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d019      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_RCC_OscConfig+0x274>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7ff fc24 	bl	80016c0 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fc20 	bl	80016c0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e15a      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f000 faa6 	bl	80023ec <RCC_Delay>
 8001ea0:	e01c      	b.n	8001edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_RCC_OscConfig+0x274>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fc0a 	bl	80016c0 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eae:	e00f      	b.n	8001ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fc06 	bl	80016c0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d908      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e140      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	42420000 	.word	0x42420000
 8001ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b9e      	ldr	r3, [pc, #632]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1e9      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a6 	beq.w	8002036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b97      	ldr	r3, [pc, #604]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10d      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b94      	ldr	r3, [pc, #592]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a93      	ldr	r2, [pc, #588]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b91      	ldr	r3, [pc, #580]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b8e      	ldr	r3, [pc, #568]	; (8002150 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d118      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f22:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <HAL_RCC_OscConfig+0x4f8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a8a      	ldr	r2, [pc, #552]	; (8002150 <HAL_RCC_OscConfig+0x4f8>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fbc7 	bl	80016c0 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f36:	f7ff fbc3 	bl	80016c0 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b64      	cmp	r3, #100	; 0x64
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0fd      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b81      	ldr	r3, [pc, #516]	; (8002150 <HAL_RCC_OscConfig+0x4f8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x312>
 8001f5c:	4b7b      	ldr	r3, [pc, #492]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a7a      	ldr	r2, [pc, #488]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e02d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x334>
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a75      	ldr	r2, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6213      	str	r3, [r2, #32]
 8001f7e:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	4a72      	ldr	r2, [pc, #456]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	f023 0304 	bic.w	r3, r3, #4
 8001f88:	6213      	str	r3, [r2, #32]
 8001f8a:	e01c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x356>
 8001f94:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a6c      	ldr	r2, [pc, #432]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x36e>
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a66      	ldr	r2, [pc, #408]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b64      	ldr	r3, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a63      	ldr	r2, [pc, #396]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fb77 	bl	80016c0 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7ff fb73 	bl	80016c0 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0ab      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ee      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x37e>
 8001ff8:	e014      	b.n	8002024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fb61 	bl	80016c0 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7ff fb5d 	bl	80016c0 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e095      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	4b4c      	ldr	r3, [pc, #304]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202a:	4b48      	ldr	r3, [pc, #288]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a47      	ldr	r2, [pc, #284]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8081 	beq.w	8002142 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002040:	4b42      	ldr	r3, [pc, #264]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d061      	beq.n	8002110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d146      	bne.n	80020e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCC_OscConfig+0x4fc>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7ff fb31 	bl	80016c0 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7ff fb2d 	bl	80016c0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e067      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	492d      	ldr	r1, [pc, #180]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a19      	ldr	r1, [r3, #32]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	430b      	orrs	r3, r1
 80020ae:	4927      	ldr	r1, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_RCC_OscConfig+0x4fc>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff fb01 	bl	80016c0 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff fafd 	bl	80016c0 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e037      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46a>
 80020e0:	e02f      	b.n	8002142 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_RCC_OscConfig+0x4fc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff faea 	bl	80016c0 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7ff fae6 	bl	80016c0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e020      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x498>
 800210e:	e018      	b.n	8002142 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e013      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_OscConfig+0x4f4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	429a      	cmp	r2, r3
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
 8002154:	42420060 	.word	0x42420060

08002158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0d0      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d910      	bls.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	4965      	ldr	r1, [pc, #404]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b63      	ldr	r3, [pc, #396]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b8      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	4b59      	ldr	r3, [pc, #356]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021cc:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	494d      	ldr	r1, [pc, #308]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d040      	beq.n	8002278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d115      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07f      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e073      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e06b      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f023 0203 	bic.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4936      	ldr	r1, [pc, #216]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002248:	f7ff fa3a 	bl	80016c0 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7ff fa36 	bl	80016c0 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e053      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 020c 	and.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d1eb      	bne.n	8002250 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d210      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	4922      	ldr	r1, [pc, #136]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e032      	b.n	800230e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4916      	ldr	r1, [pc, #88]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	490e      	ldr	r1, [pc, #56]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022e6:	f000 f821 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022ea:	4602      	mov	r2, r0
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	490a      	ldr	r1, [pc, #40]	; (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	5ccb      	ldrb	r3, [r1, r3]
 80022fa:	fa22 f303 	lsr.w	r3, r2, r3
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1cc>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1d0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f998 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40022000 	.word	0x40022000
 800231c:	40021000 	.word	0x40021000
 8002320:	08003364 	.word	0x08003364
 8002324:	20000090 	.word	0x20000090
 8002328:	20000094 	.word	0x20000094

0800232c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b490      	push	{r4, r7}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002334:	1d3c      	adds	r4, r7, #4
 8002336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002338:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800233c:	f240 2301 	movw	r3, #513	; 0x201
 8002340:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d002      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x40>
 8002366:	2b08      	cmp	r3, #8
 8002368:	d003      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x46>
 800236a:	e02d      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236e:	623b      	str	r3, [r7, #32]
      break;
 8002370:	e02d      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	0c9b      	lsrs	r3, r3, #18
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800237e:	4413      	add	r3, r2
 8002380:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002384:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	0c5b      	lsrs	r3, r3, #17
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800239e:	4413      	add	r3, r2
 80023a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023aa:	fb02 f203 	mul.w	r2, r2, r3
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	e004      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	623b      	str	r3, [r7, #32]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ca:	623b      	str	r3, [r7, #32]
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc90      	pop	{r4, r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	08003354 	.word	0x08003354
 80023e0:	40021000 	.word	0x40021000
 80023e4:	007a1200 	.word	0x007a1200
 80023e8:	003d0900 	.word	0x003d0900

080023ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <RCC_Delay+0x34>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <RCC_Delay+0x38>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0a5b      	lsrs	r3, r3, #9
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002408:	bf00      	nop
  }
  while (Delay --);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	60fa      	str	r2, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f9      	bne.n	8002408 <RCC_Delay+0x1c>
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	20000090 	.word	0x20000090
 8002424:	10624dd3 	.word	0x10624dd3

08002428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e041      	b.n	80024be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff f846 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 fc28 	bl	8002cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d001      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e03a      	b.n	8002556 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_TIM_Base_Start_IT+0x98>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d009      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <HAL_TIM_Base_Start_IT+0x9c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <HAL_TIM_Base_Start_IT+0xa0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d010      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	e007      	b.n	8002554 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800

0800256c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e041      	b.n	8002602 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f839 	bl	800260a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 fb86 	bl	8002cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_TIM_PWM_Start+0x24>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e022      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d109      	bne.n	800265a <HAL_TIM_PWM_Start+0x3e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e015      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d109      	bne.n	8002674 <HAL_TIM_PWM_Start+0x58>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e008      	b.n	8002686 <HAL_TIM_PWM_Start+0x6a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b01      	cmp	r3, #1
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e05e      	b.n	800274c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_TIM_PWM_Start+0x82>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269c:	e013      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_PWM_Start+0x92>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026ac:	e00b      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d104      	bne.n	80026be <HAL_TIM_PWM_Start+0xa2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026bc:	e003      	b.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fd74 	bl	80031bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_TIM_PWM_Start+0x138>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d107      	bne.n	80026ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_TIM_PWM_Start+0x138>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00e      	beq.n	8002716 <HAL_TIM_PWM_Start+0xfa>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d009      	beq.n	8002716 <HAL_TIM_PWM_Start+0xfa>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_TIM_PWM_Start+0x13c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d004      	beq.n	8002716 <HAL_TIM_PWM_Start+0xfa>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <HAL_TIM_PWM_Start+0x140>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d111      	bne.n	800273a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b06      	cmp	r3, #6
 8002726:	d010      	beq.n	800274a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002738:	e007      	b.n	800274a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0201 	orr.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40000400 	.word	0x40000400
 800275c:	40000800 	.word	0x40000800

08002760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d122      	bne.n	80027bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b02      	cmp	r3, #2
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0202 	mvn.w	r2, #2
 800278c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa6f 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fa62 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fa71 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d122      	bne.n	8002810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d11b      	bne.n	8002810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0204 	mvn.w	r2, #4
 80027e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa45 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa38 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fa47 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b08      	cmp	r3, #8
 800281c:	d122      	bne.n	8002864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b08      	cmp	r3, #8
 800282a:	d11b      	bne.n	8002864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0208 	mvn.w	r2, #8
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2204      	movs	r2, #4
 800283a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa1b 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fa0e 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fa1d 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b10      	cmp	r3, #16
 8002870:	d122      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b10      	cmp	r3, #16
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0210 	mvn.w	r2, #16
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2208      	movs	r2, #8
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9f1 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f9e4 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f9f3 	bl	8002c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0201 	mvn.w	r2, #1
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7fe fbb2 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ee:	2b80      	cmp	r3, #128	; 0x80
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d107      	bne.n	8002910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fce1 	bl	80032d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d10e      	bne.n	800293c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d107      	bne.n	800293c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f9b7 	bl	8002caa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b20      	cmp	r3, #32
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b20      	cmp	r3, #32
 8002956:	d107      	bne.n	8002968 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0220 	mvn.w	r2, #32
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fcac 	bl	80032c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002986:	2302      	movs	r3, #2
 8002988:	e0ac      	b.n	8002ae4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	f200 809f 	bhi.w	8002ad8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800299a:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800299c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a0:	080029d5 	.word	0x080029d5
 80029a4:	08002ad9 	.word	0x08002ad9
 80029a8:	08002ad9 	.word	0x08002ad9
 80029ac:	08002ad9 	.word	0x08002ad9
 80029b0:	08002a15 	.word	0x08002a15
 80029b4:	08002ad9 	.word	0x08002ad9
 80029b8:	08002ad9 	.word	0x08002ad9
 80029bc:	08002ad9 	.word	0x08002ad9
 80029c0:	08002a57 	.word	0x08002a57
 80029c4:	08002ad9 	.word	0x08002ad9
 80029c8:	08002ad9 	.word	0x08002ad9
 80029cc:	08002ad9 	.word	0x08002ad9
 80029d0:	08002a97 	.word	0x08002a97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f9d0 	bl	8002d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0208 	orr.w	r2, r2, #8
 80029ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6999      	ldr	r1, [r3, #24]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	619a      	str	r2, [r3, #24]
      break;
 8002a12:	e062      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fa16 	bl	8002e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6999      	ldr	r1, [r3, #24]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	021a      	lsls	r2, r3, #8
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	619a      	str	r2, [r3, #24]
      break;
 8002a54:	e041      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fa5f 	bl	8002f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0208 	orr.w	r2, r2, #8
 8002a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0204 	bic.w	r2, r2, #4
 8002a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69d9      	ldr	r1, [r3, #28]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	61da      	str	r2, [r3, #28]
      break;
 8002a94:	e021      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 faa9 	bl	8002ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69d9      	ldr	r1, [r3, #28]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	021a      	lsls	r2, r3, #8
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	61da      	str	r2, [r3, #28]
      break;
 8002ad6:	e000      	b.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_TIM_ConfigClockSource+0x18>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e0b3      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x180>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3c:	d03e      	beq.n	8002bbc <HAL_TIM_ConfigClockSource+0xd0>
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b42:	f200 8087 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	f000 8085 	beq.w	8002c58 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b52:	d87f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b54:	2b70      	cmp	r3, #112	; 0x70
 8002b56:	d01a      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xa2>
 8002b58:	2b70      	cmp	r3, #112	; 0x70
 8002b5a:	d87b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b5c:	2b60      	cmp	r3, #96	; 0x60
 8002b5e:	d050      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x116>
 8002b60:	2b60      	cmp	r3, #96	; 0x60
 8002b62:	d877      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b64:	2b50      	cmp	r3, #80	; 0x50
 8002b66:	d03c      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0xf6>
 8002b68:	2b50      	cmp	r3, #80	; 0x50
 8002b6a:	d873      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d058      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x136>
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d86f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b74:	2b30      	cmp	r3, #48	; 0x30
 8002b76:	d064      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x156>
 8002b78:	2b30      	cmp	r3, #48	; 0x30
 8002b7a:	d86b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d060      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x156>
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d867      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05c      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x156>
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d05a      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b8c:	e062      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f000 faee 	bl	800317e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	609a      	str	r2, [r3, #8]
      break;
 8002bba:	e04e      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f000 fad7 	bl	800317e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bde:	609a      	str	r2, [r3, #8]
      break;
 8002be0:	e03b      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 fa4e 	bl	8003090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2150      	movs	r1, #80	; 0x50
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 faa5 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002c00:	e02b      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f000 fa6c 	bl	80030ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2160      	movs	r1, #96	; 0x60
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fa95 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002c20:	e01b      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f000 fa2e 	bl	8003090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2140      	movs	r1, #64	; 0x40
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fa85 	bl	800314a <TIM_ITRx_SetConfig>
      break;
 8002c40:	e00b      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f000 fa7c 	bl	800314a <TIM_ITRx_SetConfig>
        break;
 8002c52:	e002      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a29      	ldr	r2, [pc, #164]	; (8002d74 <TIM_Base_SetConfig+0xb8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <TIM_Base_SetConfig+0x30>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cda:	d007      	beq.n	8002cec <TIM_Base_SetConfig+0x30>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <TIM_Base_SetConfig+0xbc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d003      	beq.n	8002cec <TIM_Base_SetConfig+0x30>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <TIM_Base_SetConfig+0xc0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d108      	bne.n	8002cfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <TIM_Base_SetConfig+0xb8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00b      	beq.n	8002d1e <TIM_Base_SetConfig+0x62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0c:	d007      	beq.n	8002d1e <TIM_Base_SetConfig+0x62>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <TIM_Base_SetConfig+0xbc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d003      	beq.n	8002d1e <TIM_Base_SetConfig+0x62>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <TIM_Base_SetConfig+0xc0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d108      	bne.n	8002d30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a07      	ldr	r2, [pc, #28]	; (8002d74 <TIM_Base_SetConfig+0xb8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d103      	bne.n	8002d64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	615a      	str	r2, [r3, #20]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800

08002d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 0201 	bic.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f023 0302 	bic.w	r3, r3, #2
 8002dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <TIM_OC1_SetConfig+0xc8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10c      	bne.n	8002df6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f023 0308 	bic.w	r3, r3, #8
 8002de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <TIM_OC1_SetConfig+0xc8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d111      	bne.n	8002e22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	621a      	str	r2, [r3, #32]
}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40012c00 	.word	0x40012c00

08002e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0210 	bic.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0320 	bic.w	r3, r3, #32
 8002e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <TIM_OC2_SetConfig+0xd0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10d      	bne.n	8002ec8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <TIM_OC2_SetConfig+0xd0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d113      	bne.n	8002ef8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00

08002f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0303 	bic.w	r3, r3, #3
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <TIM_OC3_SetConfig+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10d      	bne.n	8002f9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <TIM_OC3_SetConfig+0xd0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d113      	bne.n	8002fca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	621a      	str	r2, [r3, #32]
}
 8002fe4:	bf00      	nop
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40012c00 	.word	0x40012c00

08002ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800303e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	031b      	lsls	r3, r3, #12
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0f      	ldr	r2, [pc, #60]	; (800308c <TIM_OC4_SetConfig+0x98>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d109      	bne.n	8003068 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800305a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	40012c00 	.word	0x40012c00

08003090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f023 030a 	bic.w	r3, r3, #10
 80030cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	621a      	str	r2, [r3, #32]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 0210 	bic.w	r2, r3, #16
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003116:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	031b      	lsls	r3, r3, #12
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003128:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	f043 0307 	orr.w	r3, r3, #7
 800316c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b087      	sub	sp, #28
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003198:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	021a      	lsls	r2, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	609a      	str	r2, [r3, #8]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2201      	movs	r2, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1a      	ldr	r2, [r3, #32]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	43db      	mvns	r3, r3
 80031de:	401a      	ands	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a1a      	ldr	r2, [r3, #32]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003218:	2302      	movs	r3, #2
 800321a:	e046      	b.n	80032aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00e      	beq.n	800327e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d009      	beq.n	800327e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d004      	beq.n	800327e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a10      	ldr	r2, [pc, #64]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10c      	bne.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4313      	orrs	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800

080032c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <__libc_init_array>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	2600      	movs	r6, #0
 80032e8:	4d0c      	ldr	r5, [pc, #48]	; (800331c <__libc_init_array+0x38>)
 80032ea:	4c0d      	ldr	r4, [pc, #52]	; (8003320 <__libc_init_array+0x3c>)
 80032ec:	1b64      	subs	r4, r4, r5
 80032ee:	10a4      	asrs	r4, r4, #2
 80032f0:	42a6      	cmp	r6, r4
 80032f2:	d109      	bne.n	8003308 <__libc_init_array+0x24>
 80032f4:	f000 f822 	bl	800333c <_init>
 80032f8:	2600      	movs	r6, #0
 80032fa:	4d0a      	ldr	r5, [pc, #40]	; (8003324 <__libc_init_array+0x40>)
 80032fc:	4c0a      	ldr	r4, [pc, #40]	; (8003328 <__libc_init_array+0x44>)
 80032fe:	1b64      	subs	r4, r4, r5
 8003300:	10a4      	asrs	r4, r4, #2
 8003302:	42a6      	cmp	r6, r4
 8003304:	d105      	bne.n	8003312 <__libc_init_array+0x2e>
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	f855 3b04 	ldr.w	r3, [r5], #4
 800330c:	4798      	blx	r3
 800330e:	3601      	adds	r6, #1
 8003310:	e7ee      	b.n	80032f0 <__libc_init_array+0xc>
 8003312:	f855 3b04 	ldr.w	r3, [r5], #4
 8003316:	4798      	blx	r3
 8003318:	3601      	adds	r6, #1
 800331a:	e7f2      	b.n	8003302 <__libc_init_array+0x1e>
 800331c:	08003374 	.word	0x08003374
 8003320:	08003374 	.word	0x08003374
 8003324:	08003374 	.word	0x08003374
 8003328:	08003378 	.word	0x08003378

0800332c <memset>:
 800332c:	4603      	mov	r3, r0
 800332e:	4402      	add	r2, r0
 8003330:	4293      	cmp	r3, r2
 8003332:	d100      	bne.n	8003336 <memset+0xa>
 8003334:	4770      	bx	lr
 8003336:	f803 1b01 	strb.w	r1, [r3], #1
 800333a:	e7f9      	b.n	8003330 <memset+0x4>

0800333c <_init>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	bf00      	nop
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr

08003348 <_fini>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	bf00      	nop
 800334c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334e:	bc08      	pop	{r3}
 8003350:	469e      	mov	lr, r3
 8003352:	4770      	bx	lr
